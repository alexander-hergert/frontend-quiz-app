{
  "quizzes": [
    {
      "title": "HTML",
      "icon": "/assets/images/icon-html.svg",
      "questions": [
        {
          "question": "What does HTML stand for?",
          "options": [
            "Hyper Trainer Marking Language",
            "Hyper Text Marketing Language",
            "Hyper Text Markup Language",
            "Hyper Text Markup Leveler"
          ],
          "answer": "Hyper Text Markup Language"
        },
        {
          "question": "Which of the following is the correct structure for an HTML document?",
          "options": [
            "<html><head></head><body></body></html>",
            "<head><html></html><body></body></head>",
            "<body><head></head><html></html></body>",
            "<html><body></body><head></head></html>"
          ],
          "answer": "<html><head></head><body></body></html>"
        },
        {
          "question": "Which HTML element is used to define the title of a document?",
          "options": ["<head>", "<title>", "<header>", "<top>"],
          "answer": "<title>"
        },
        {
          "question": "What is the purpose of the <body> tag in HTML?",
          "options": [
            "It defines the document's head section.",
            "It contains all the content such as text, images, and links.",
            "It is used to define the main content of an HTML document.",
            "It specifies the body of the email content in HTML."
          ],
          "answer": "It contains all the content such as text, images, and links."
        },
        {
          "question": "Which HTML tag is used to create a hyperlink?",
          "options": ["<hyperlink>", "<link>", "<a>", "<href>"],
          "answer": "<a>"
        },
        {
          "question": "Which tag is used to display images in HTML?",
          "options": ["<img>", "<image>", "<src>", "<pic>"],
          "answer": "<img>"
        },
        {
          "question": "What attribute is used to provide the path of an image in the <img> tag?",
          "options": ["link", "src", "href", "url"],
          "answer": "src"
        },
        {
          "question": "Which HTML tag is used to create an unordered list?",
          "options": ["<ul>", "<ol>", "<list>", "<li>"],
          "answer": "<ul>"
        },
        {
          "question": "What does the <br> tag do?",
          "options": [
            "It breaks the text into two sections.",
            "It creates a bold text.",
            "It inserts a line break.",
            "It adds a new row in a table."
          ],
          "answer": "It inserts a line break."
        },
        {
          "question": "In HTML, what does the `fieldset` tag do?",
          "options": [
            "It is used to group related data in a form.",
            "It sets the field to a fixed size.",
            "It automatically validates the fields within a form.",
            "It hides the fields in a form."
          ],
          "answer": "It is used to group related data in a form."
        },
        {
          "question": "What is the purpose of the 'lang' attribute in the 'html' tag of an HTML document?",
          "options": [
            "Specifies the programming language used in the document.",
            "Defines the character encoding of the document.",
            "Indicates the language of the text content in the document.",
            "Specifies the version of HTML used in the document."
          ],
          "answer": "Indicates the language of the text content in the document."
        },
        {
          "question": "What is the purpose of the 'aria-label' attribute in HTML?",
          "options": [
            "Specifies a label for an input element in a form.",
            "Defines a caption for an image or multimedia content.",
            "Provides a textual description for elements that are not exposed visually.",
            "Indicates the language of the document for accessibility purposes."
          ],
          "answer": "Provides a textual description for elements that are not exposed visually."
        },
        {
          "question": "What is the purpose of the 'target' attribute in HTML anchor ('<a>') tags?",
          "options": [
            "Specifies the destination URL of the link.",
            "Indicates the relationship between the current document and the linked document.",
            "Defines the type of content to be displayed when the link is clicked.",
            "Specifies where to open the linked document, such as in a new window or tab."
          ],
          "answer": "Specifies where to open the linked document, such as in a new window or tab."
        },
        {
          "question": "What is the purpose of the 'contenteditable' attribute in HTML elements?",
          "options": [
            "Specifies whether the element's content can be edited by the user.",
            "Defines the character encoding of the element's content.",
            "Indicates the type of content expected in the element.",
            "Specifies the layout and formatting of the element's content."
          ],
          "answer": "Specifies whether the element's content can be edited by the user."
        },
        {
          "question": "What is the purpose of the 'alt' attribute in HTML images, and why is it important for accessibility?",
          "options": [
            "The 'alt' attribute in HTML images is used to specify the alternative text for an image, which is displayed if the image fails to load or for users with visual impairments using screen readers. It is important for accessibility because it provides context and information about the image content to users who cannot see it.",
            "The 'alt' attribute in HTML images is used to define the alignment of the image within its container. It is important for accessibility because it ensures proper layout and visual presentation of the image on different devices and screen sizes.",
            "The 'alt' attribute in HTML images is used to specify the animation effect applied to the image. It is important for accessibility because it enhances user experience by providing dynamic visual feedback.",
            "The 'alt' attribute in HTML images is used to specify the alternative URL for the image, which is loaded if the primary URL fails. It is important for accessibility because it ensures uninterrupted access to the image content."
          ],
          "answer": "The 'alt' attribute in HTML images is used to specify the alternative text for an image, which is displayed if the image fails to load or for users with visual impairments using screen readers. It is important for accessibility because it provides context and information about the image content to users who cannot see it."
        },
        {
          "question": "What is the purpose of the 'autocomplete' attribute in HTML forms?",
          "options": [
            "Specifies the default value of an input field.",
            "Defines the auto-completion behavior of an input field.",
            "Indicates the type of data expected in an input field.",
            "Specifies the name of the form element for submission."
          ],
          "answer": "Defines the auto-completion behavior of an input field."
        },
        {
          "question": "What is the role of the 'role' attribute in HTML?",
          "options": [
            "Specifies the purpose or state of an element for accessibility purposes.",
            "Defines the alignment of an element within its container.",
            "Indicates the type of media content embedded in an element.",
            "Specifies the MIME type of an external resource."
          ],
          "answer": "Specifies the purpose or state of an element for accessibility purposes."
        },
        {
          "question": "What is semantic HTML?",
          "options": [
            "HTML tags used to describe the structure of a web page, improving accessibility and SEO.",
            "HTML tags used for styling and layout purposes only.",
            "HTML tags used exclusively for scripting and dynamic content generation.",
            "HTML tags used for defining multimedia content and interactivity."
          ],
          "answer": "HTML tags used to describe the structure of a web page, improving accessibility and SEO."
        },
        {
          "question": "What is the purpose of the 'scoped' attribute in HTML style ('<style>') tags?",
          "options": [
            "Specifies whether the style should be applied to the entire document or only to a specific section.",
            "Defines the scope of variables declared within the style block.",
            "Indicates that the styles defined within the style block apply only to the parent element and its descendants.",
            "Specifies the media type for which the styles are intended, such as 'screen' or 'print'."
          ],
          "answer": "Indicates that the styles defined within the style block apply only to the parent element and its descendants."
        },
        {
          "question": "What is the purpose of the 'defer' attribute in HTML script ('<script>') tags?",
          "options": [
            "Specifies whether the script should be executed asynchronously.",
            "Defines the order in which scripts should be executed.",
            "Indicates that the script execution should be deferred until after the document is parsed.",
            "Specifies the type of script, such as 'text/javascript' or 'module'."
          ],
          "answer": "Indicates that the script execution should be deferred until after the document is parsed."
        },
        {
          "question": "What is the purpose of the 'rel' attribute in HTML link ('<link>') tags?",
          "options": [
            "Specifies the location of the linked document.",
            "Defines the relationship between the current document and the linked document.",
            "Indicates the media type for which the linked document is intended, such as 'screen' or 'print'.",
            "Specifies whether the linked document should be preloaded or deferred."
          ],
          "answer": "Defines the relationship between the current document and the linked document."
        },
        {
          "question": "What is the purpose of the 'sandbox' attribute in HTML iframe ('<iframe>') tags?",
          "options": [
            "Specifies the URL of the document to be embedded in the iframe.",
            "Defines the security restrictions applied to the content within the iframe.",
            "Indicates whether the iframe should be resizable by the user.",
            "Specifies the alignment of the iframe within its container."
          ],
          "answer": "Defines the security restrictions applied to the content within the iframe."
        },
        {
          "question": "What is the purpose of the 'charset' attribute in HTML script ('<script>') tags?",
          "options": [
            "Specifies the character encoding of the linked document.",
            "Defines the character encoding of the script file itself.",
            "Indicates the type of script, such as 'text/javascript' or 'module'.",
            "Specifies the language of the script content."
          ],
          "answer": "Defines the character encoding of the script file itself."
        },
        {
          "question": "What is the purpose of the 'aria-hidden' attribute in HTML?",
          "options": [
            "Specifies whether the element is hidden from screen readers and other assistive technologies.",
            "Defines the visibility of the element on the webpage.",
            "Indicates whether the element should be displayed in fullscreen mode.",
            "Specifies the animation effect applied to the element."
          ],
          "answer": "Specifies whether the element is hidden from screen readers and other assistive technologies."
        },
        {
          "question": "What is the purpose of the 'download' attribute in HTML anchor ('<a>') tags?",
          "options": [
            "Specifies the destination URL of the link.",
            "Defines the behavior of the link when clicked.",
            "Indicates that the linked document should be downloaded rather than displayed.",
            "Specifies the type of content to be downloaded."
          ],
          "answer": "Indicates that the linked document should be downloaded rather than displayed."
        },
        {
          "question": "What is the purpose of the 'async' attribute in HTML script ('<script>') tags?",
          "options": [
            "Specifies whether the script should be executed asynchronously.",
            "Defines the order in which scripts should be executed.",
            "Indicates that the script execution should be deferred until after the document is parsed.",
            "Specifies the type of script, such as 'text/javascript' or 'module'."
          ],
          "answer": "Specifies whether the script should be executed asynchronously."
        },
        {
          "question": "What is the purpose of the 'autocomplete' attribute in HTML input fields?",
          "options": [
            "Specifies the default value of the input field.",
            "Defines the auto-completion behavior of the input field.",
            "Indicates the type of data expected in the input field.",
            "Specifies the name of the input field for submission."
          ],
          "answer": "Defines the auto-completion behavior of the input field."
        },
        {
          "question": "What is the purpose of the 'spellcheck' attribute in HTML input fields?",
          "options": [
            "Specifies whether spell checking should be enabled for the input field.",
            "Defines the character encoding of the input field's content.",
            "Indicates the type of data expected in the input field.",
            "Specifies the validation criteria for the input field."
          ],
          "answer": "Specifies whether spell checking should be enabled for the input field."
        },
        {
          "question": "What is the purpose of the 'nowrap' attribute in HTML table cells?",
          "options": [
            "Specifies whether the content within the table cell should wrap to the next line.",
            "Defines the alignment of the content within the table cell.",
            "Indicates that the content within the table cell should not wrap to the next line.",
            "Specifies the width of the table cell."
          ],
          "answer": "Indicates that the content within the table cell should not wrap to the next line."
        },
        {
          "question": "What is the purpose of the 'hidden' attribute in HTML elements?",
          "options": [
            "Specifies whether the element should be hidden from screen readers.",
            "Defines the visibility of the element on the webpage.",
            "Indicates whether the element should be displayed in fullscreen mode.",
            "Specifies the animation effect applied to the element."
          ],
          "answer": "Defines the visibility of the element on the webpage."
        },
        {
          "question": "You're tasked with optimizing the loading performance of a web page that contains a large number of images. What strategies would you consider to improve the page load time while ensuring accessibility and usability?",
          "options": [
            "Lazy loading, image compression, responsive images, and accessibility attributes. Prioritization: Implement lazy loading to defer the loading of images outside the viewport until they are needed. Use image compression techniques to reduce file size without sacrificing quality. Implement responsive images to serve appropriately sized images based on device characteristics. Ensure accessibility by adding alt attributes to images for screen reader users.",
            "Only focus on lazy loading. Prioritization: Implement lazy loading to defer the loading of images outside the viewport until they are needed.",
            "Only focus on image compression. Prioritization: Use image compression techniques to reduce file size without sacrificing quality.",
            "Only focus on responsive images. Prioritization: Implement responsive images to serve appropriately sized images based on device characteristics."
          ],
          "answer": "Lazy loading, image compression, responsive images, and accessibility attributes. Prioritization: Implement lazy loading to defer the loading of images outside the viewport until they are needed. Use image compression techniques to reduce file size without sacrificing quality. Implement responsive images to serve appropriately sized images based on device characteristics. Ensure accessibility by adding alt attributes to images for screen reader users."
        },
        {
          "question": "You're tasked with optimizing the performance of a web page that includes a large form with several input fields. What strategies would you consider to enhance the user experience while ensuring efficient data submission and accessibility?",
          "options": [
            "Progressive enhancement, form validation, accessibility features, and data submission optimization. Prioritization: Implement progressive enhancement to ensure the form functions correctly even without JavaScript. Apply form validation to provide real-time feedback to users and prevent invalid submissions. Ensure accessibility by adding appropriate labels, descriptions, and error messages for screen reader users. Optimize data submission by implementing client-side validation and batched data submission to reduce server load.",
            "Only focus on progressive enhancement. Prioritization: Implement progressive enhancement to ensure the form functions correctly even without JavaScript.",
            "Only focus on form validation. Prioritization: Apply form validation to provide real-time feedback to users and prevent invalid submissions.",
            "Only focus on accessibility features. Prioritization: Ensure accessibility by adding appropriate labels, descriptions, and error messages for screen reader users."
          ],
          "answer": "Progressive enhancement, form validation, accessibility features, and data submission optimization. Prioritization: Implement progressive enhancement to ensure the form functions correctly even without JavaScript. Apply form validation to provide real-time feedback to users and prevent invalid submissions. Ensure accessibility by adding appropriate labels, descriptions, and error messages for screen reader users. Optimize data submission by implementing client-side validation and batched data submission to reduce server load."
        },
        {
          "question": "You're tasked with improving the accessibility of a complex web application. What considerations and strategies would you prioritize to ensure the application is usable for all users?",
          "options": [
            "Semantic HTML, keyboard navigation, ARIA attributes, and testing with assistive technologies. Prioritization: Ensure all elements are marked up semantically using appropriate HTML tags to enhance accessibility. Implement keyboard navigation for all interactive elements to ensure users can navigate the application without a mouse. Utilize ARIA attributes to provide additional context and information for assistive technologies. Regularly test the application with screen readers and other assistive technologies to identify and address accessibility issues.",
            "Only focus on semantic HTML. Prioritization: Ensure all elements are marked up semantically using appropriate HTML tags to enhance accessibility.",
            "Only focus on keyboard navigation. Prioritization: Implement keyboard navigation for all interactive elements to ensure users can navigate the application without a mouse.",
            "Only focus on ARIA attributes. Prioritization: Utilize ARIA attributes to provide additional context and information for assistive technologies."
          ],
          "answer": "Semantic HTML, keyboard navigation, ARIA attributes, and testing with assistive technologies. Prioritization: Ensure all elements are marked up semantically using appropriate HTML tags to enhance accessibility. Implement keyboard navigation for all interactive elements to ensure users can navigate the application without a mouse. Utilize ARIA attributes to provide additional context and information for assistive technologies. Regularly test the application with screen readers and other assistive technologies to identify and address accessibility issues."
        },
        {
          "question": "As a system engineer, you're tasked with ensuring the security of a web application. What measures would you implement to protect the application from common security vulnerabilities?",
          "options": [
            "Input validation, proper authentication and authorization, secure communication (HTTPS), and regular security audits. Prioritization: Implement strict input validation to prevent SQL injection, cross-site scripting (XSS), and other injection attacks. Ensure proper authentication and authorization mechanisms are in place to control access to sensitive resources. Enforce secure communication using HTTPS to protect data transmission. Conduct regular security audits and vulnerability assessments to identify and address potential security weaknesses.",
            "Only focus on input validation. Prioritization: Implement strict input validation to prevent SQL injection, cross-site scripting (XSS), and other injection attacks.",
            "Only focus on authentication and authorization. Prioritization: Ensure proper authentication and authorization mechanisms are in place to control access to sensitive resources.",
            "Only focus on secure communication (HTTPS). Prioritization: Enforce secure communication using HTTPS to protect data transmission."
          ],
          "answer": "Input validation, proper authentication and authorization, secure communication (HTTPS), and regular security audits. Prioritization: Implement strict input validation to prevent SQL injection, cross-site scripting (XSS), and other injection attacks. Ensure proper authentication and authorization mechanisms are in place to control access to sensitive resources. Enforce secure communication using HTTPS to protect data transmission. Conduct regular security audits and vulnerability assessments to identify and address potential security weaknesses."
        },
        {
          "question": "Explain the importance of using semantic HTML elements in web development and provide examples of such elements.",
          "options": [
            "Semantic HTML elements improve accessibility, SEO, and maintainability. Examples include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>.",
            "Only focus on accessibility. Examples include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>.",
            "Only focus on SEO. Examples include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>.",
            "Only focus on maintainability. Examples include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>."
          ],
          "answer": "Semantic HTML elements improve accessibility, SEO, and maintainability. Examples include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>."
        },
        {
          "question": "Explain the importance of using HTML form validation and provide examples of validation techniques.",
          "options": [
            "HTML form validation helps ensure data integrity and improves user experience. Examples include required fields, email validation, pattern matching with regular expressions, and range validation for numeric inputs.",
            "Only focus on data integrity. Examples include required fields, email validation, pattern matching with regular expressions, and range validation for numeric inputs.",
            "Only focus on user experience. Examples include required fields, email validation, pattern matching with regular expressions, and range validation for numeric inputs.",
            "Only focus on security. Examples include required fields, email validation, pattern matching with regular expressions, and range validation for numeric inputs."
          ],
          "answer": "HTML form validation helps ensure data integrity and improves user experience. Examples include required fields, email validation, pattern matching with regular expressions, and range validation for numeric inputs."
        },
        {
          "question": "Explain the importance of implementing accessible HTML forms and provide examples of accessibility features.",
          "options": [
            "Accessible HTML forms ensure inclusivity and usability for all users, including those with disabilities. Examples include providing descriptive labels for form fields, using appropriate input types (e.g., <input type='email'>), adding alternative text for images within forms, and ensuring proper focus management and keyboard navigation.",
            "Only focus on inclusivity. Examples include providing descriptive labels for form fields, using appropriate input types (e.g., <input type='email'>), adding alternative text for images within forms, and ensuring proper focus management and keyboard navigation.",
            "Only focus on usability. Examples include providing descriptive labels for form fields, using appropriate input types (e.g., <input type='email'>), adding alternative text for images within forms, and ensuring proper focus management and keyboard navigation.",
            "Only focus on security. Examples include providing descriptive labels for form fields, using appropriate input types (e.g., <input type='email'>), adding alternative text for images within forms, and ensuring proper focus management and keyboard navigation."
          ],
          "answer": "Accessible HTML forms ensure inclusivity and usability for all users, including those with disabilities. Examples include providing descriptive labels for form fields, using appropriate input types (e.g., <input type='email'>), adding alternative text for images within forms, and ensuring proper focus management and keyboard navigation."
        },
        {
          "question": "Explain the advantages of using HTML5 form elements and provide examples of such elements.",
          "options": [
            "HTML5 form elements offer improved user experience, client-side validation, and support for new input types. Examples include <input type='email'>, <input type='url'>, <input type='number'>, <input type='date'>, and <input type='color'>.",
            "Only focus on user experience. Examples include <input type='email'>, <input type='url'>, <input type='number'>, <input type='date'>, and <input type='color'>.",
            "Only focus on client-side validation. Examples include <input type='email'>, <input type='url'>, <input type='number'>, <input type='date'>, and <input type='color'>.",
            "Only focus on support for new input types. Examples include <input type='email'>, <input type='url'>, <input type='number'>, <input type='date'>, and <input type='color'>."
          ],
          "answer": "HTML5 form elements offer improved user experience, client-side validation, and support for new input types. Examples include <input type='email'>, <input type='url'>, <input type='number'>, <input type='date'>, and <input type='color'>."
        },
        {
          "question": "Explain the significance of using HTML multimedia elements and provide examples of such elements.",
          "options": [
            "HTML multimedia elements enhance user engagement and content accessibility. Examples include <audio>, <video>, and <canvas>.",
            "Only focus on user engagement. Examples include <audio>, <video>, and <canvas>.",
            "Only focus on content accessibility. Examples include <audio>, <video>, and <canvas>.",
            "Only focus on multimedia formats. Examples include <audio>, <video>, and <canvas>."
          ],
          "answer": "HTML multimedia elements enhance user engagement and content accessibility. Examples include <audio>, <video>, and <canvas>."
        },
        {
          "question": "Explain the role of HTML5 APIs in modern web development and provide examples of commonly used APIs.",
          "options": [
            "HTML5 APIs enable access to device features, offline capabilities, and rich media manipulation. Examples include Geolocation API, Web Storage API, Fetch API, and Web Audio API.",
            "Only focus on device features. Examples include Geolocation API, Web Storage API, Fetch API, and Web Audio API.",
            "Only focus on offline capabilities. Examples include Geolocation API, Web Storage API, Fetch API, and Web Audio API.",
            "Only focus on rich media manipulation. Examples include Geolocation API, Web Storage API, Fetch API, and Web Audio API."
          ],
          "answer": "HTML5 APIs enable access to device features, offline capabilities, and rich media manipulation. Examples include Geolocation API, Web Storage API, Fetch API, and Web Audio API."
        },
        {
          "question": "In HTML, what attribute is used to provide additional information about an element?",
          "options": ["class", "id", "style", "data-"],
          "answer": "data-"
        },
        {
          "question": "Which HTML5 element is used to define navigation links?",
          "options": ["<nav>", "<header>", "<footer>", "<section>"],
          "answer": "<nav>"
        },
        {
          "question": "In HTML, what is the correct way to define a list item within a description list (<dl>)?",
          "options": ["<li>", "<dt>", "<dd>", "<ul>"],
          "answer": "<dd>"
        },
        {
          "question": "Which HTML attribute specifies the media to apply the styles defined within the linked CSS?",
          "options": ["media", "type", "rel", "hreflang"],
          "answer": "media"
        },
        {
          "question": "What is the purpose of the 'scoped' attribute in HTML?",
          "options": [
            "To specify the dimensions of an <iframe>",
            "To restrict the visibility of a <style> element to its parent element",
            "To limit the effect of a <style> element to the current document's <head> section",
            "To define the scope of a <meta> element's content"
          ],
          "answer": "To limit the effect of a <style> element to the current document's <head> section"
        },
        {
          "question": "Which HTML5 element is used to define the structure of a document, such as headings, paragraphs, and lists?",
          "options": ["<article>", "<section>", "<header>", "<body>"],
          "answer": "<body>"
        },
        {
          "question": "What is the correct way to embed an image using SVG in HTML?",
          "options": [
            "<img src='image.svg'>",
            "<object data='image.svg' type='image/svg+xml'>",
            "<svg><image xlink:href='image.svg'></svg>",
            "<embed src='image.svg' type='image/svg+xml'>"
          ],
          "answer": "<img src='image.svg'>"
        },
        {
          "question": "Which HTML attribute is used to specify the character encoding for the document?",
          "options": ["charset", "encoding", "lang", "doctype"],
          "answer": "charset"
        },
        {
          "question": "Which HTML element is used to define the relationship between a document and an external resource?",
          "options": ["<link>", "<meta>", "<base>", "<script>"],
          "answer": "<link>"
        },
        {
          "question": "What is the purpose of the 'download' attribute in HTML?",
          "options": [
            "To specify the location of a downloadable file",
            "To define the download method for a file",
            "To indicate that the target will be downloaded when a user clicks on the hyperlink",
            "To force the browser to download and save the file instead of opening it"
          ],
          "answer": "To force the browser to download and save the file instead of opening it"
        }
      ]
    },
    {
      "title": "CSS",
      "icon": "/assets/images/icon-css.svg",
      "questions": [
        {
          "question": "What does CSS stand for?",
          "options": [
            "Colorful Style Sheets",
            "Computer Style Sheets",
            "Cascading Style Sheets",
            "Creative Style Sheets"
          ],
          "answer": "Cascading Style Sheets"
        },
        {
          "question": "Which HTML attribute is used to define inline styles?",
          "options": ["styles", "style", "class", "font-style"],
          "answer": "style"
        },
        {
          "question": "How do you insert a comment in a CSS file?",
          "options": [
            "// this is a comment //",
            "/* this is a comment */",
            "-- this is a comment --",
            "<!-- this is a comment -->"
          ],
          "answer": "/* this is a comment */"
        },
        {
          "question": "Which property is used to change the background color of an element?",
          "options": ["color", "bgcolor", "background-color", "background"],
          "answer": "background-color"
        },
        {
          "question": "How do you apply a style to all <p> elements?",
          "options": ["p { }", ".p { }", "#p { }", "all.p { }"],
          "answer": "p { }"
        },
        {
          "question": "Which property is used to change the font of an element?",
          "options": ["font-style", "text-style", "font-family", "typeface"],
          "answer": "font-family"
        },
        {
          "question": "How do you make each word in a text start with a capital letter?",
          "options": [
            "text-transform: capitalize",
            "text-transform: uppercase",
            "text-style: capital",
            "font-transform: capitalize"
          ],
          "answer": "text-transform: capitalize"
        },
        {
          "question": "How do you select an element with the class name 'header'?",
          "options": [".header", "#header", "header", "*header"],
          "answer": ".header"
        },
        {
          "question": "What is the default value of the 'position' property?",
          "options": ["relative", "fixed", "absolute", "static"],
          "answer": "static"
        },
        {
          "question": "What is the purpose of the z-index property in CSS?",
          "options": [
            "To count the number of elements",
            "To set the magnification level of an element",
            "To specify the stack order of an element",
            "To create a zoom effect"
          ],
          "answer": "To specify the stack order of an element"
        },
        {
          "question": "What is the purpose of the 'float' property in CSS?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the distance between adjacent elements.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the positioning of an element to the left or right of its containing element."
          ],
          "answer": "Controls the positioning of an element to the left or right of its containing element."
        },
        {
          "question": "What does the 'box-sizing' property in CSS control?",
          "options": [
            "Specifies the size of the content box relative to its containing element.",
            "Defines the amount of space between the border and the content of an element.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Determines how the total width and height of an element are calculated, including padding and border."
          ],
          "answer": "Determines how the total width and height of an element are calculated, including padding and border."
        },
        {
          "question": "What is the purpose of the 'z-index' property in CSS?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which elements are stacked along the z-axis.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the distance between adjacent elements."
          ],
          "answer": "Defines the order in which elements are stacked along the z-axis."
        },
        {
          "question": "What does the 'position' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which elements are stacked along the z-axis.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Determines the positioning scheme used for an element, such as 'static', 'relative', 'absolute', or 'fixed'."
          ],
          "answer": "Determines the positioning scheme used for an element, such as 'static', 'relative', 'absolute', or 'fixed'."
        },
        {
          "question": "What does the 'display' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which elements are stacked along the z-axis.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the distance between adjacent elements."
          ],
          "answer": "Indicates whether an element should be displayed as a block or inline element."
        },
        {
          "question": "What does the 'overflow' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which elements are stacked along the z-axis.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls how content that overflows the element's box is handled."
          ],
          "answer": "Controls how content that overflows the element's box is handled."
        },
        {
          "question": "What does the 'opacity' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which elements are stacked along the z-axis.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the transparency of an element."
          ],
          "answer": "Controls the transparency of an element."
        },
        {
          "question": "What does the 'flex-direction' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which flex items appear in the flex container.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the direction in which flex items are placed in the flex container."
          ],
          "answer": "Controls the direction in which flex items are placed in the flex container."
        },
        {
          "question": "What does the 'text-decoration' property in CSS control?",
          "options": [
            "Specifies the alignment of text within its container.",
            "Defines the appearance of an element's border.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the decoration added to text, such as underline, overline, or line-through."
          ],
          "answer": "Specifies the decoration added to text, such as underline, overline, or line-through."
        },
        {
          "question": "What does the 'box-shadow' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the appearance of an element's border.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Creates a shadow effect around the border edge of an element."
          ],
          "answer": "Creates a shadow effect around the border edge of an element."
        },
        {
          "question": "What does the 'transition' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the order in which elements are stacked along the z-axis.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the transitional effect applied to an element's property changes over time."
          ],
          "answer": "Specifies the transitional effect applied to an element's property changes over time."
        },
        {
          "question": "What does the 'text-align' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the appearance of an element's border.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the horizontal alignment of text content within an element."
          ],
          "answer": "Specifies the horizontal alignment of text content within an element."
        },
        {
          "question": "What does the 'flex-wrap' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines whether flex items are forced into a single line or can wrap onto multiple lines within the flex container.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the wrapping behavior of the element's content."
          ],
          "answer": "Defines whether flex items are forced into a single line or can wrap onto multiple lines within the flex container."
        },
        {
          "question": "What does the 'justify-content' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines whether flex items are forced into a single line or can wrap onto multiple lines within the flex container.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Controls the distribution of space between and around flex items along the main axis of the flex container."
          ],
          "answer": "Controls the distribution of space between and around flex items along the main axis of the flex container."
        },
        {
          "question": "What does the 'background-color' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines whether flex items are forced into a single line or can wrap onto multiple lines within the flex container.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the background color of an element."
          ],
          "answer": "Specifies the background color of an element."
        },
        {
          "question": "What does the 'font-size' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the size of the font used for text content within an element.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the size of the element's border."
          ],
          "answer": "Defines the size of the font used for text content within an element."
        },
        {
          "question": "What does the 'border-radius' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the size of the font used for text content within an element.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the roundedness of the corners of an element's border."
          ],
          "answer": "Specifies the roundedness of the corners of an element's border."
        },
        {
          "question": "What does the 'margin' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the space between the border and content of an element.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the size of the element's border."
          ],
          "answer": "Defines the space between the border and content of an element."
        },
        {
          "question": "What does the 'padding' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the space between the border and content of an element.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the size of the element's border."
          ],
          "answer": "Defines the space between the border and content of an element."
        },
        {
          "question": "What does the 'line-height' property in CSS control?",
          "options": [
            "Specifies the alignment of an element within its container.",
            "Defines the space between lines of text within an element.",
            "Indicates whether an element should be displayed as a block or inline element.",
            "Specifies the size of the element's border."
          ],
          "answer": "Defines the space between lines of text within an element."
        },
        {
          "question": "Explain the importance of CSS selectors in styling web pages and provide examples of commonly used selectors.",
          "options": [
            "CSS selectors allow precise targeting of HTML elements for styling, facilitating consistent design across web pages. Examples include class selectors (.class), ID selectors (#id), element selectors (tagname), descendant selectors (ancestor descendant), and pseudo-classes (:hover, :nth-child).",
            "Only focus on targeting HTML elements. Examples include class selectors (.class), ID selectors (#id), element selectors (tagname), descendant selectors (ancestor descendant), and pseudo-classes (:hover, :nth-child).",
            "Only focus on consistent design. Examples include class selectors (.class), ID selectors (#id), element selectors (tagname), descendant selectors (ancestor descendant), and pseudo-classes (:hover, :nth-child).",
            "Only focus on styling web pages. Examples include class selectors (.class), ID selectors (#id), element selectors (tagname), descendant selectors (ancestor descendant), and pseudo-classes (:hover, :nth-child)."
          ],
          "answer": "CSS selectors allow precise targeting of HTML elements for styling, facilitating consistent design across web pages. Examples include class selectors (.class), ID selectors (#id), element selectors (tagname), descendant selectors (ancestor descendant), and pseudo-classes (:hover, :nth-child)."
        },
        {
          "question": "Explain the CSS box model and its components, and discuss its significance in web development.",
          "options": [
            "The CSS box model consists of content, padding, border, and margin. It defines the layout and spacing of elements on a web page. Content refers to the actual content of the element, padding is the space between the content and the border, border is the visible boundary of the element, and margin is the space outside the border. Understanding the box model is essential for controlling layout and spacing in web development.",
            "Only focus on the components of the CSS box model. The CSS box model consists of content, padding, border, and margin.",
            "Only focus on the significance of the CSS box model in web development. Understanding the box model is essential for controlling layout and spacing in web development.",
            "Only focus on the layout and spacing of elements. The CSS box model defines the layout and spacing of elements on a web page."
          ],
          "answer": "The CSS box model consists of content, padding, border, and margin. It defines the layout and spacing of elements on a web page. Content refers to the actual content of the element, padding is the space between the content and the border, border is the visible boundary of the element, and margin is the space outside the border. Understanding the box model is essential for controlling layout and spacing in web development."
        },
        {
          "question": "Explain CSS specificity and its importance in determining which styles take precedence, and provide examples of specificity calculations.",
          "options": [
            "CSS specificity determines which styles are applied to an element when multiple conflicting styles exist. Specificity is calculated based on the number of ID selectors, class selectors, and element selectors in a CSS rule. Inline styles have the highest specificity, followed by ID selectors, class selectors, and element selectors. Importance: Understanding specificity helps developers manage style conflicts and ensure desired styling outcomes.",
            "Only focus on the importance of CSS specificity. Understanding specificity helps developers manage style conflicts and ensure desired styling outcomes.",
            "Only focus on the calculation of CSS specificity. Specificity is calculated based on the number of ID selectors, class selectors, and element selectors in a CSS rule.",
            "Only focus on the precedence of styles. Inline styles have the highest specificity, followed by ID selectors, class selectors, and element selectors."
          ],
          "answer": "CSS specificity determines which styles are applied to an element when multiple conflicting styles exist. Specificity is calculated based on the number of ID selectors, class selectors, and element selectors in a CSS rule. Inline styles have the highest specificity, followed by ID selectors, class selectors, and element selectors. Importance: Understanding specificity helps developers manage style conflicts and ensure desired styling outcomes."
        },
        {
          "question": "Explain the CSS Flexbox layout model and its advantages in web development, and provide examples of common use cases.",
          "options": [
            "The CSS Flexbox layout model provides a more efficient way to design complex layouts in web development. It offers flexibility in arranging elements along the main axis and cross axis, making it ideal for creating responsive designs and aligning content within containers. Common use cases include creating navigation menus, card layouts, and centering elements both vertically and horizontally.",
            "Only focus on the advantages of the CSS Flexbox layout model. The CSS Flexbox layout model provides a more efficient way to design complex layouts in web development. It offers flexibility in arranging elements along the main axis and cross axis, making it ideal for creating responsive designs and aligning content within containers.",
            "Only focus on common use cases of the CSS Flexbox layout model. Common use cases include creating navigation menus, card layouts, and centering elements both vertically and horizontally.",
            "Only focus on the arrangement of elements. The CSS Flexbox layout model offers flexibility in arranging elements along the main axis and cross axis, making it ideal for creating responsive designs and aligning content within containers."
          ],
          "answer": "The CSS Flexbox layout model provides a more efficient way to design complex layouts in web development. It offers flexibility in arranging elements along the main axis and cross axis, making it ideal for creating responsive designs and aligning content within containers. Common use cases include creating navigation menus, card layouts, and centering elements both vertically and horizontally."
        },
        {
          "question": "Explain the CSS Flexbox layout model and its advantages in web development, and provide examples of common use cases.",
          "options": [
            "The CSS Flexbox layout model provides a more efficient way to design complex layouts in web development. It offers flexibility in arranging elements along the main axis and cross axis, making it ideal for creating responsive designs and aligning content within containers. Common use cases include creating navigation menus, card layouts, and centering elements both vertically and horizontally.",
            "The CSS Flexbox layout model is primarily used for creating navigation menus and card layouts in web development. It offers flexibility in arranging elements along the main axis and cross axis, making it ideal for responsive designs.",
            "CSS Flexbox is useful for aligning elements vertically and horizontally within containers, and it's commonly used for creating navigation menus and centering elements in web development.",
            "Flexbox layout provides a more efficient way to design complex layouts in web development. It's commonly used for aligning content within containers and creating responsive designs, such as navigation menus and card layouts."
          ],
          "answer": "The CSS Flexbox layout model provides a more efficient way to design complex layouts in web development. It offers flexibility in arranging elements along the main axis and cross axis, making it ideal for creating responsive designs and aligning content within containers. Common use cases include creating navigation menus, card layouts, and centering elements both vertically and horizontally."
        },
        {
          "question": "Explain the CSS Grid layout model and its advantages in web development, and provide examples of common use cases.",
          "options": [
            "The CSS Grid layout model offers a powerful way to design grid-based layouts in web development. It provides precise control over column and row placement, making it ideal for creating complex, multi-dimensional layouts. Common use cases include building responsive web pages with intricate grid structures, such as magazine-style layouts and dashboard interfaces.",
            "The CSS Grid layout model is primarily used for creating simple layouts with evenly spaced columns and rows. It offers limited control over column and row placement, making it suitable for basic web pages with minimal design requirements.",
            "CSS Grid is useful for aligning elements in a single direction, either horizontally or vertically. It's commonly used for simple web page layouts, such as blog posts and product listings.",
            "Flexbox layout provides a more efficient way to design complex layouts in web development compared to CSS Grid. It's commonly used for aligning content within containers and creating responsive designs, such as navigation menus and card layouts."
          ],
          "answer": "The CSS Grid layout model offers a powerful way to design grid-based layouts in web development. It provides precise control over column and row placement, making it ideal for creating complex, multi-dimensional layouts. Common use cases include building responsive web pages with intricate grid structures, such as magazine-style layouts and dashboard interfaces."
        },
        {
          "question": "Explain the significance of CSS animations in web development and provide examples of how they enhance user experience.",
          "options": [
            "CSS animations add interactivity and visual appeal to web pages without the need for JavaScript. They can be used to create engaging effects such as transitions, transformations, and keyframe animations. Examples include animating buttons on hover, creating loading spinners, and adding subtle fade-in effects to elements.",
            "CSS animations are primarily used for creating static layouts in web development. They offer limited interactivity and are not suitable for dynamic content.",
            "CSS animations enhance web pages by providing advanced functionality and interactivity. They can be used to create complex interactions such as drag-and-drop features and form validations.",
            "Animations in CSS are less efficient compared to JavaScript animations. They should be avoided in favor of JavaScript-based solutions for better performance."
          ],
          "answer": "CSS animations add interactivity and visual appeal to web pages without the need for JavaScript. They can be used to create engaging effects such as transitions, transformations, and keyframe animations. Examples include animating buttons on hover, creating loading spinners, and adding subtle fade-in effects to elements."
        },
        {
          "question": "Explain the role of CSS preprocessors in web development and provide examples of popular preprocessors.",
          "options": [
            "CSS preprocessors enhance the capabilities of CSS by adding features like variables, mixins, and nested rules. They help improve code organization, maintainability, and efficiency in large-scale projects. Examples of popular CSS preprocessors include Sass, Less, and Stylus.",
            "CSS preprocessors are primarily used for converting CSS code into HTML. They offer limited functionality compared to vanilla CSS and are not commonly used in modern web development.",
            "CSS preprocessors facilitate real-time collaboration among developers by allowing them to work on CSS files simultaneously. Examples include Sass, Less, and Stylus.",
            "CSS preprocessors are deprecated in modern web development practices. They have been replaced by CSS-in-JS solutions for better performance and maintainability."
          ],
          "answer": "CSS preprocessors enhance the capabilities of CSS by adding features like variables, mixins, and nested rules. They help improve code organization, maintainability, and efficiency in large-scale projects. Examples of popular CSS preprocessors include Sass, Less, and Stylus."
        },
        {
          "question": "Explain the role of CSS transitions in web development and provide examples of how they enhance user experience.",
          "options": [
            "CSS transitions allow for smooth animations of CSS properties, such as color, size, and position changes, over a specified duration. They enhance user experience by adding interactivity and visual appeal to web pages without the need for JavaScript. Examples include hover effects on buttons, fading in/out of elements, and sliding transitions for navigation menus.",
            "CSS transitions are primarily used for static styling in web development. They offer limited interactivity and are not commonly used for dynamic content.",
            "CSS transitions facilitate real-time collaboration among developers by allowing them to work on CSS files simultaneously. Examples include hover effects on buttons, fading in/out of elements, and sliding transitions for navigation menus.",
            "Transitions in CSS provide a more efficient way to design complex animations compared to JavaScript. They are commonly used for creating interactive elements and dynamic user interfaces."
          ],
          "answer": "CSS transitions allow for smooth animations of CSS properties, such as color, size, and position changes, over a specified duration. They enhance user experience by adding interactivity and visual appeal to web pages without the need for JavaScript. Examples include hover effects on buttons, fading in/out of elements, and sliding transitions for navigation menus."
        },
        {
          "question": "Explain the role of CSS variables in web development and provide examples of how they enhance code maintainability.",
          "options": [
            "CSS variables, also known as custom properties, allow developers to define reusable values that can be used throughout the stylesheet. They enhance code maintainability by providing a centralized way to manage design tokens such as colors, font sizes, and spacing. Examples include defining a primary color variable to maintain consistency across the site or a spacing variable to adjust spacing between elements.",
            "CSS variables are primarily used for defining animations in web development. They offer limited functionality compared to vanilla CSS and are not commonly used for styling.",
            "CSS variables facilitate real-time collaboration among developers by allowing them to work on CSS files simultaneously. Examples include defining a primary color variable to maintain consistency across the site or a spacing variable to adjust spacing between elements.",
            "Variables in CSS provide a more efficient way to design complex layouts compared to inline styles. They are commonly used for creating responsive designs and dynamic user interfaces."
          ],
          "answer": "CSS variables, also known as custom properties, allow developers to define reusable values that can be used throughout the stylesheet. They enhance code maintainability by providing a centralized way to manage design tokens such as colors, font sizes, and spacing. Examples include defining a primary color variable to maintain consistency across the site or a spacing variable to adjust spacing between elements."
        },
        {
          "question": "Explain the purpose of CSS pseudo-elements in web development and provide examples of how they are used to enhance styling.",
          "options": [
            "CSS pseudo-elements allow developers to style specific parts of an element, such as the first letter or line, without adding extra markup to the HTML. They enhance styling by providing additional decorative elements and effects, such as creating drop caps, styling list item markers, or adding decorative quotes to blockquotes.",
            "CSS pseudo-elements are primarily used for creating dynamic animations in web development. They offer limited functionality compared to vanilla CSS and are not commonly used for styling.",
            "CSS pseudo-elements facilitate real-time collaboration among developers by allowing them to work on CSS files simultaneously. Examples include creating drop caps, styling list item markers, or adding decorative quotes to blockquotes.",
            "Pseudo-elements in CSS provide a more efficient way to design complex layouts compared to inline styles. They are commonly used for creating responsive designs and dynamic user interfaces."
          ],
          "answer": "CSS pseudo-elements allow developers to style specific parts of an element, such as the first letter or line, without adding extra markup to the HTML. They enhance styling by providing additional decorative elements and effects, such as creating drop caps, styling list item markers, or adding decorative quotes to blockquotes."
        },
        {
          "question": "You are tasked with styling a navigation menu for a website. The menu should have the following features:\n1. Horizontal layout.\n2. Each menu item should have equal width.\n3. When hovered over, each menu item should change background color.\n4. The menu should be centered horizontally on the page.\n\nHow would you implement this using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            "nav.menu {\n  display: flex;\n  justify-content: center;\n}\n\n.menu-item {\n  width: 100%;\n  text-align: center;\n}\n\n.menu-item:hover {\n  background-color: #f0f0f0;\n}",
            "nav.menu {\n  display: flex;\n  justify-content: space-between;\n}\n\n.menu-item {\n  flex: 1;\n  text-align: center;\n}\n\n.menu-item:hover {\n  background-color: #f0f0f0;\n}",
            "nav.menu {\n  display: inline-flex;\n  justify-content: center;\n}\n\n.menu-item {\n  width: auto;\n  text-align: center;\n}\n\n.menu-item:hover {\n  background-color: #f0f0f0;\n}",
            "nav.menu {\n  display: flex;\n  justify-content: center;\n}\n\n.menu-item {\n  width: auto;\n  text-align: center;\n}\n\n.menu-item:hover {\n  background-color: #f0f0f0;\n}"
          ],
          "answer": "nav.menu {\n  display: flex;\n  justify-content: center;\n}\n\n.menu-item {\n  width: 100%;\n  text-align: center;\n}\n\n.menu-item:hover {\n  background-color: #f0f0f0;\n}"
        },
        {
          "question": "You are tasked with creating a CSS layout for a simple blog post. The layout should include the following elements:\n1. A title at the top of the post with a font size of 24px and centered horizontally.\n2. A paragraph of text below the title with a font size of 16px and a line height of 1.5.\n3. An image within the post with a maximum width of 100% and centered horizontally.\n4. A horizontal line below the image to separate it from the rest of the content.\n\nHow would you implement this layout using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            "/* CSS for blog post layout */\n.title {\n  font-size: 24px;\n  text-align: center;\n}\n\n.content {\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.image {\n  max-width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\n.separator {\n  width: 100%;\n  border-top: 1px solid #ccc;\n  margin-top: 20px;\n}",
            "/* CSS for blog post layout */\n.title {\n  font-size: 24px;\n  text-align: left;\n}\n\n.content {\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.image {\n  max-width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.separator {\n  width: 80%;\n  border-bottom: 1px solid #ccc;\n  margin-top: 20px;\n}",
            "/* CSS for blog post layout */\n.title {\n  font-size: 18px;\n  text-align: center;\n}\n\n.content {\n  font-size: 14px;\n  line-height: 1.2;\n}\n\n.image {\n  max-width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\n.separator {\n  width: 100%;\n  border-bottom: 1px solid #ccc;\n  margin-top: 10px;\n}",
            "/* CSS for blog post layout */\n.title {\n  font-size: 20px;\n  text-align: center;\n}\n\n.content {\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.image {\n  max-width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\n.separator {\n  width: 100%;\n  border-bottom: 2px solid #ccc;\n  margin-top: 20px;\n}"
          ],
          "answer": "/* CSS for blog post layout */\n.title {\n  font-size: 24px;\n  text-align: center;\n}\n\n.content {\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.image {\n  max-width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\n.separator {\n  width: 100%;\n  border-top: 1px solid #ccc;\n  margin-top: 20px;\n}"
        },
        {
          "question": "You are tasked with creating a responsive grid layout using CSS for a product gallery. The layout should have the following features:\n1. It should display three columns of images on larger screens and two columns on smaller screens.\n2. Each image should have a maximum width of 100% of its container.\n3. The images should be evenly spaced within the columns, with a gap of 20px between them.\n\nHow would you implement this layout using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            "/* CSS for responsive grid layout */\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n}\n\n.item {\n  width: 100%;\n  max-width: 100%;\n}",
            "/* CSS for responsive grid layout */\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n.item {\n  flex: 1;\n  max-width: calc(50% - 20px);\n}\n\n@media screen and (min-width: 768px) {\n  .item {\n    max-width: calc(33.33% - 20px);\n  }\n}",
            "/* CSS for responsive grid layout */\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n\n.item {\n  width: 100%;\n  max-width: 100%;\n}\n\n@media screen and (max-width: 768px) {\n  .container {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}",
            "/* CSS for responsive grid layout */\n.container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n}\n\n.item {\n  width: 100%;\n  max-width: 100%;\n}\n\n@media screen and (min-width: 768px) {\n  .container {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}"
          ],
          "answer": "/* CSS for responsive grid layout */\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n}\n\n.item {\n  width: 100%;\n  max-width: 100%;\n}"
        },
        {
          "question": "You are tasked with creating a CSS animation for a button hover effect. The animation should have the following features:\n1. When hovering over the button, it should smoothly change its background color from blue to green.\n2. The animation should take 0.5 seconds to complete and should ease in and out.\n\nHow would you implement this hover effect using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            ".button {\n  background-color: blue;\n  transition: background-color 0.5s ease-in-out;\n}\n\n.button:hover {\n  background-color: green;\n}",
            ".button {\n  background-color: blue;\n  transition: background-color 0.3s linear;\n}\n\n.button:hover {\n  background-color: green;\n}",
            ".button {\n  background-color: blue;\n  transition: background-color 0.5s ease;\n}\n\n.button:hover {\n  background-color: green;\n}",
            ".button {\n  background-color: blue;\n  transition: background-color 0.5s ease-in-out;\n}\n\n.button:hover {\n  background-color: red;\n}"
          ],
          "answer": ".button {\n  background-color: blue;\n  transition: background-color 0.5s ease-in-out;\n}\n\n.button:hover {\n  background-color: green;\n}"
        },
        {
          "question": "You have been tasked with styling a form input field with the following requirements:\n1. The input field should have a border of 1px solid gray.\n2. When the input field is focused, it should have a thicker border of 2px solid blue.\n3. The border should smoothly transition between the normal and focused states over 0.3 seconds.\n\nHow would you implement this styling using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            "input[type='text'] {\n  border: 1px solid gray;\n  transition: border 0.3s ease;\n}\n\ninput[type='text']:focus {\n  border: 2px solid blue;\n}",
            "input[type='text'] {\n  border: 1px solid gray;\n  transition: border-width 0.3s ease;\n}\n\ninput[type='text']:focus {\n  border-width: 2px;\n  border-color: blue;\n}",
            "input[type='text'] {\n  border: 1px solid gray;\n}\n\ninput[type='text']:focus {\n  border: 2px solid blue;\n  transition: border-width 0.3s ease;\n}",
            "input[type='text'] {\n  border: 1px solid gray;\n  transition: border-color 0.3s ease;\n}\n\ninput[type='text']:focus {\n  border-color: blue;\n}"
          ],
          "answer": "input[type='text'] {\n  border: 1px solid gray;\n  transition: border 0.3s ease;\n}\n\ninput[type='text']:focus {\n  border: 2px solid blue;\n}"
        },
        {
          "question": "You are tasked with positioning a div element with the following requirements:\n1. The div should be positioned 20 pixels from the top and 50 pixels from the left of its containing element.\n2. It should have a fixed width of 200 pixels and a height of 100 pixels.\n3. The div should have a background color of red.\n\nHow would you implement this positioning using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            ".box {\n  position: absolute;\n  top: 20px;\n  left: 50px;\n  width: 200px;\n  height: 100px;\n  background-color: red;\n}",
            ".box {\n  position: relative;\n  top: 20px;\n  left: 50px;\n  width: 200px;\n  height: 100px;\n  background-color: red;\n}",
            ".box {\n  position: fixed;\n  top: 20px;\n  left: 50px;\n  width: 200px;\n  height: 100px;\n  background-color: red;\n}",
            ".box {\n  position: static;\n  top: 20px;\n  left: 50px;\n  width: 200px;\n  height: 100px;\n  background-color: red;\n}"
          ],
          "answer": ".box {\n  position: absolute;\n  top: 20px;\n  left: 50px;\n  width: 200px;\n  height: 100px;\n  background-color: red;\n}"
        },
        {
          "question": "You are tasked with creating a layout using CSS Flexbox to display three items side by side. The layout should have the following features:\n1. The items should be evenly spaced horizontally.\n2. Each item should have a width of 100 pixels and a height of 50 pixels.\n3. There should be a gap of 20 pixels between each item.\n\nHow would you implement this layout using CSS Flexbox? Provide a code snippet that demonstrates your solution.",
          "options": [
            ".container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.item {\n  width: 100px;\n  height: 50px;\n  margin-right: 20px;\n}",
            ".container {\n  display: flex;\n  justify-content: space-around;\n}\n\n.item {\n  width: 100px;\n  height: 50px;\n  margin: 0 10px;\n}",
            ".container {\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.item {\n  width: 100px;\n  height: 50px;\n}",
            ".container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.item {\n  width: 100px;\n  height: 50px;\n  margin: 0 20px;\n}"
          ],
          "answer": ".container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.item {\n  width: 100px;\n  height: 50px;\n  margin-right: 20px;\n}"
        },
        {
          "question": "You are tasked with creating a responsive layout using CSS Flexbox for a navigation menu. The layout should have the following features:\n1. The navigation items should be displayed horizontally on larger screens and vertically stacked on smaller screens.\n2. Each navigation item should have equal spacing between them.\n3. The layout should adapt smoothly when the screen size changes.\n\nHow would you implement this responsive layout using CSS Flexbox? Provide a code snippet that demonstrates your solution.",
          "options": [
            ".nav {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n@media screen and (max-width: 768px) {\n  .nav {\n    flex-direction: column;\n    align-items: center;\n  }\n}",
            ".nav {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n@media screen and (max-width: 768px) {\n  .nav {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n}",
            ".nav {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n@media screen and (min-width: 768px) {\n  .nav {\n    flex-direction: row;\n    align-items: center;\n  }\n}",
            ".nav {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n@media screen and (max-width: 768px) {\n  .nav {\n    flex-direction: row;\n    align-items: center;\n  }\n}"
          ],
          "answer": ".nav {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n@media screen and (max-width: 768px) {\n  .nav {\n    flex-direction: column;\n    align-items: center;\n  }\n}"
        },
        {
          "question": "You are tasked with styling a dropdown menu using CSS. The dropdown menu should have the following features:\n1. The dropdown should be hidden by default and only appear when the user hovers over the parent element.\n2. It should have a solid border around it with a background color of white.\n3. The dropdown items should have a background color of light gray and change to a darker gray when hovered over.\n\nHow would you implement this dropdown menu styling using CSS? Provide a code snippet that demonstrates your solution.",
          "options": [
            ".dropdown {\n  display: none;\n  border: 1px solid #000;\n  background-color: white;\n}\n\n.parent:hover .dropdown {\n  display: block;\n}\n\n.dropdown-item {\n  background-color: #f0f0f0;\n}\n\n.dropdown-item:hover {\n  background-color: #ccc;\n}",
            ".dropdown {\n  visibility: hidden;\n  border: 1px solid #000;\n  background-color: white;\n}\n\n.parent:hover .dropdown {\n  visibility: visible;\n}\n\n.dropdown-item {\n  background-color: #f0f0f0;\n}\n\n.dropdown-item:hover {\n  background-color: #ccc;\n}",
            ".dropdown {\n  display: none;\n  border: 1px solid #000;\n  background-color: white;\n}\n\n.parent:hover + .dropdown {\n  display: block;\n}\n\n.dropdown-item {\n  background-color: #f0f0f0;\n}\n\n.dropdown-item:hover {\n  background-color: #ccc;\n}",
            ".dropdown {\n  visibility: hidden;\n  border: 1px solid #000;\n  background-color: white;\n}\n\n.parent:hover + .dropdown {\n  visibility: visible;\n}\n\n.dropdown-item {\n  background-color: #f0f0f0;\n}\n\n.dropdown-item:hover {\n  background-color: #ccc;\n}"
          ],
          "answer": ".dropdown {\n  display: none;\n  border: 1px solid #000;\n  background-color: white;\n}\n\n.parent:hover .dropdown {\n  display: block;\n}\n\n.dropdown-item {\n  background-color: #f0f0f0;\n}\n\n.dropdown-item:hover {\n  background-color: #ccc;\n}"
        }
      ]
    },
    {
      "title": "JavaScript",
      "icon": "/assets/images/icon-js.svg",
      "questions": [
        {
          "question": "Which syntax is correct to output 'Hello World' in an alert box?",
          "options": [
            "alertBox('Hello World');",
            "msg('Hello World');",
            "alert('Hello World');",
            "msgBox('Hello World');"
          ],
          "answer": "alert('Hello World');"
        },
        {
          "question": "How do you call a function named 'myFunction'?",
          "options": [
            "call function myFunction()",
            "call myFunction()",
            "myFunction()",
            "execute myFunction()"
          ],
          "answer": "myFunction()"
        },
        {
          "question": "How to write an IF statement in JavaScript?",
          "options": ["if i = 5 then", "if (i == 5)", "if i == 5", "if i = 5"],
          "answer": "if (i == 5)"
        },
        {
          "question": "How to write an IF statement for executing some code if 'i' is NOT equal to 5?",
          "options": [
            "if (i <> 5)",
            "if i =! 5 then",
            "if (i != 5)",
            "if i not = 5"
          ],
          "answer": "if (i != 5)"
        },
        {
          "question": "How does a FOR loop start?",
          "options": [
            "for (i = 0; i <= 5)",
            "for i = 1 to 5",
            "for (i <= 5; i++)",
            "for (i = 0; i <= 5; i++)"
          ],
          "answer": "for (i = 0; i <= 5; i++)"
        },
        {
          "question": "How can you add a single-line comment in JavaScript?",
          "options": [
            "'This is a single-line comment",
            "//This is a single-line comment",
            "<!--This is a single-line comment-->",
            "/* This is a single-line comment */"
          ],
          "answer": "//This is a single-line comment"
        },
        {
          "question": "What is the correct way to write a JavaScript array?",
          "options": [
            "var colors = (1:'red', 2:'green', 3:'blue')",
            "var colors = ['red', 'green', 'blue']",
            "var colors = 'red', 'green', 'blue'",
            "var colors = 1 = ('red'), 2 = ('green'), 3 = ('blue')"
          ],
          "answer": "var colors = ['red', 'green', 'blue']"
        },
        {
          "question": "How do you find the number with the highest value of x and y?",
          "options": [
            "Math.ceil(x, y)",
            "top(x, y)",
            "Math.max(x, y)",
            "Math.highest(x, y)"
          ],
          "answer": "Math.max(x, y)"
        },
        {
          "question": "Which operator is used to assign a value to a variable?",
          "options": ["-", "*", "=", "x"],
          "answer": "="
        },
        {
          "question": "What is the correct way to write a JavaScript object?",
          "options": [
            "var person = {firstName: 'John', lastName: 'Doe'};",
            "var person = {firstName = 'John', lastName = 'Doe'};",
            "var person = (firstName: 'John', lastName: 'Doe');",
            "var person = (firstName = 'John', lastName = 'Doe');"
          ],
          "answer": "var person = {firstName: 'John', lastName: 'Doe'};"
        },
        {
          "question": "What is the purpose of the 'querySelector' method in JavaScript?",
          "options": [
            "Selects the first element that matches a specified CSS selector in the document.",
            "Defines a new CSS style rule to be applied to elements in the document.",
            "Specifies the alignment of an element within its container.",
            "Indicates whether an element should be displayed as a block or inline element."
          ],
          "answer": "Selects the first element that matches a specified CSS selector in the document."
        },
        {
          "question": "What does the 'addEventListener' method in JavaScript do?",
          "options": [
            "Selects the first element that matches a specified CSS selector in the document.",
            "Defines a new CSS style rule to be applied to elements in the document.",
            "Registers an event handler function to be called when a specified event occurs on the selected element.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Registers an event handler function to be called when a specified event occurs on the selected element."
        },
        {
          "question": "What does the 'forEach' method in JavaScript do?",
          "options": [
            "Selects the first element that matches a specified CSS selector in the document.",
            "Defines a new CSS style rule to be applied to elements in the document.",
            "Iterates over each element in an array and executes a callback function for each.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Iterates over each element in an array and executes a callback function for each."
        },
        {
          "question": "What does the 'fetch' function in JavaScript do?",
          "options": [
            "Selects the first element that matches a specified CSS selector in the document.",
            "Defines a new CSS style rule to be applied to elements in the document.",
            "Retrieves resources or data from a specified URL asynchronously using the Promise interface.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Retrieves resources or data from a specified URL asynchronously using the Promise interface."
        },
        {
          "question": "What does the 'map' method in JavaScript do?",
          "options": [
            "Selects the first element that matches a specified CSS selector in the document.",
            "Defines a new CSS style rule to be applied to elements in the document.",
            "Creates a new array populated with the results of calling a provided function on every element in the calling array.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Creates a new array populated with the results of calling a provided function on every element in the calling array."
        },
        {
          "question": "What does the 'setTimeout' function in JavaScript do?",
          "options": [
            "Delays the execution of a function or the evaluation of a code snippet.",
            "Defines a new CSS style rule to be applied to elements in the document.",
            "Registers an event handler function to be called when a specified event occurs on the selected element.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Delays the execution of a function or the evaluation of a code snippet."
        },
        {
          "question": "What does the 'localStorage' object in JavaScript do?",
          "options": [
            "Allows access to the browser's location data.",
            "Stores data with no expiration date, which persists even when the browser is closed and reopened.",
            "Registers an event handler function to be called when a specified event occurs on the selected element.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Stores data with no expiration date, which persists even when the browser is closed and reopened."
        },
        {
          "question": "What does the 'reduce' method in JavaScript do?",
          "options": [
            "Registers an event handler function to be called when a specified event occurs on the selected element.",
            "Combines all elements in an array into a single value, using a provided function.",
            "Stores data with no expiration date, which persists even when the browser is closed and reopened.",
            "Specifies the alignment of an element within its container."
          ],
          "answer": "Combines all elements in an array into a single value, using a provided function."
        },
        {
          "question": "What does the 'Promise' object in JavaScript represent?",
          "options": [
            "A value that may be available now, or in the future, or never.",
            "A function that is used to perform asynchronous operations.",
            "A built-in object that represents the eventual completion or failure of an asynchronous operation.",
            "An object that provides methods for manipulating and formatting strings."
          ],
          "answer": "A built-in object that represents the eventual completion or failure of an asynchronous operation."
        },
        {
          "question": "What does the 'Array.isArray()' method in JavaScript do?",
          "options": [
            "Checks if a variable is an array.",
            "Converts an array-like object into an array.",
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Checks if a variable is an array."
        },
        {
          "question": "What does the 'Math.max()' method in JavaScript do?",
          "options": [
            "Finds the maximum value among the arguments passed to the function.",
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if a variable is an array.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Finds the maximum value among the arguments passed to the function."
        },
        {
          "question": "What does the 'JSON.stringify()' method in JavaScript do?",
          "options": [
            "Parses a JSON string, constructing the JavaScript value or object described by the string.",
            "Serializes a JavaScript object into a JSON string.",
            "Finds the maximum value among the arguments passed to the function.",
            "Creates a new array with the results of calling a provided function on every element in the calling array."
          ],
          "answer": "Serializes a JavaScript object into a JSON string."
        },
        {
          "question": "What does the 'isNaN()' function in JavaScript do?",
          "options": [
            "Checks if a value is not a number.",
            "Checks if a value is a number.",
            "Finds the maximum value among the arguments passed to the function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Checks if a value is not a number."
        },
        {
          "question": "What does the 'typeof' operator in JavaScript do?",
          "options": [
            "Checks if a value is not a number.",
            "Checks if a value is a number.",
            "Returns a string indicating the type of the unevaluated operand.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Returns a string indicating the type of the unevaluated operand."
        },
        {
          "question": "What does the 'Array.from()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if a value is not a number.",
            "Converts an array-like or iterable object to an array.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Converts an array-like or iterable object to an array."
        },
        {
          "question": "What does the 'Array.prototype.filter()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if a value is not a number.",
            "Filters elements in an array based on a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Filters elements in an array based on a provided function."
        },
        {
          "question": "What does the 'Array.prototype.map()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if a value is not a number.",
            "Filters elements in an array based on a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Creates a new array with the results of calling a provided function on every element in the calling array."
        },
        {
          "question": "What does the 'Array.prototype.reduce()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Combines all elements in an array into a single value, using a provided function.",
            "Filters elements in an array based on a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Combines all elements in an array into a single value, using a provided function."
        },
        {
          "question": "What does the 'Array.prototype.some()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if at least one element in the array satisfies the provided testing function.",
            "Combines all elements in an array into a single value, using a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Checks if at least one element in the array satisfies the provided testing function."
        },
        {
          "question": "What does the 'Array.prototype.every()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if all elements in the array satisfy the provided testing function.",
            "Combines all elements in an array into a single value, using a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Checks if all elements in the array satisfy the provided testing function."
        },
        {
          "question": "What does the 'Array.prototype.includes()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Checks if an array includes a certain element, returning true or false.",
            "Combines all elements in an array into a single value, using a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Checks if an array includes a certain element, returning true or false."
        },
        {
          "question": "What does the 'Array.prototype.findIndex()' method in JavaScript do?",
          "options": [
            "Creates a new array with the results of calling a provided function on every element in the calling array.",
            "Finds the index of the first element in the array that satisfies the provided testing function.",
            "Combines all elements in an array into a single value, using a provided function.",
            "Sorts the elements of an array in place and returns the sorted array."
          ],
          "answer": "Finds the index of the first element in the array that satisfies the provided testing function."
        },
        {
          "question": "What is the difference between '==' and '===' operators in JavaScript?",
          "options": [
            "'==' performs type coercion, allowing comparison of different data types, while '===' strictly compares both value and type.",
            "'==' performs a strict comparison, ensuring both value and type match, while '===' allows type coercion.",
            "'==' checks only for value equality, while '===' checks for both value and type equality.",
            "'==' and '===' are interchangeable and have no difference in JavaScript."
          ],
          "answer": "'==' performs type coercion, allowing comparison of different data types, while '===' strictly compares both value and type."
        },
        {
          "question": "What is the event loop in JavaScript?",
          "options": [
            "A mechanism that allows JavaScript to handle asynchronous operations by executing callback functions when certain events occur.",
            "A data structure used to store and manage events in the DOM.",
            "A loop that iterates over all events in the browser's event queue and executes corresponding event handlers.",
            "A loop that continuously checks for new events and executes corresponding event handlers in the order they were received."
          ],
          "answer": "A mechanism that allows JavaScript to handle asynchronous operations by executing callback functions when certain events occur."
        },
        {
          "question": "What is a closure in JavaScript?",
          "options": [
            "A function that has access to its own local scope as well as the scope in which it was created, even after that scope has closed.",
            "A JavaScript object used to store key-value pairs.",
            "A built-in JavaScript function used for iterating over arrays.",
            "A method used to bind the value of 'this' within a function to a specific object."
          ],
          "answer": "A function that has access to its own local scope as well as the scope in which it was created, even after that scope has closed."
        },
        {
          "question": "What is the difference between 'var', 'let', and 'const' in JavaScript?",
          "options": [
            "'var' declares a variable with function scope, 'let' declares a variable with block scope, and 'const' declares a constant variable with block scope.",
            "'var' declares a constant variable, 'let' declares a variable with function scope, and 'const' declares a variable with block scope.",
            "'var' declares a variable with block scope, 'let' declares a variable with function scope, and 'const' declares a constant variable with block scope.",
            "'var', 'let', and 'const' are all interchangeable and have no difference in JavaScript."
          ],
          "answer": "'var' declares a variable with function scope, 'let' declares a variable with block scope, and 'const' declares a constant variable with block scope."
        },
        {
          "question": "What is a callback function in JavaScript?",
          "options": [
            "A function passed as an argument to another function, which will be invoked at a later time or after an asynchronous operation completes.",
            "A function that is called immediately after its declaration.",
            "A function used to iterate over elements in an array.",
            "A function used to handle errors in asynchronous code."
          ],
          "answer": "A function passed as an argument to another function, which will be invoked at a later time or after an asynchronous operation completes."
        },
        {
          "question": "What is the 'this' keyword in JavaScript?",
          "options": [
            "A keyword used to refer to the current function being executed.",
            "A keyword used to refer to the global object in non-strict mode, and undefined in strict mode.",
            "A keyword used to refer to the object that owns the current method being executed.",
            "A keyword used to refer to the previous value of a variable."
          ],
          "answer": "A keyword used to refer to the object that owns the current method being executed."
        },
        {
          "question": "What is the purpose of the 'bind' method in JavaScript?",
          "options": [
            "To create a new array with the results of calling a provided function on every element in the calling array.",
            "To attach an event handler function to an element, so that it is executed when the event occurs.",
            "To create a new function that, when called, has its 'this' keyword set to a specified value.",
            "To sort the elements of an array in place and return the sorted array."
          ],
          "answer": "To create a new function that, when called, has its 'this' keyword set to a specified value."
        },
        {
          "question": "What is a higher-order function in JavaScript?",
          "options": [
            "A function that accepts another function as an argument or returns a function as a result.",
            "A function that has access to its own local scope as well as the scope in which it was created, even after that scope has closed.",
            "A function used to handle errors in asynchronous code.",
            "A function used to iterate over elements in an array."
          ],
          "answer": "A function that accepts another function as an argument or returns a function as a result."
        },
        {
          "question": "What is a pure function in JavaScript?",
          "options": [
            "A function that modifies its arguments or performs side effects.",
            "A function that has access to its own local scope as well as the scope in which it was created, even after that scope has closed.",
            "A function that always returns the same output for the same input and does not cause side effects.",
            "A function used to handle errors in asynchronous code."
          ],
          "answer": "A function that always returns the same output for the same input and does not cause side effects."
        },
        {
          "question": "What is a generator function in JavaScript?",
          "options": [
            "A function that can be paused and resumed, allowing for the generation of a sequence of values over time.",
            "A function that has access to its own local scope as well as the scope in which it was created, even after that scope has closed.",
            "A function used to handle errors in asynchronous code.",
            "A function that modifies its arguments or performs side effects."
          ],
          "answer": "A function that can be paused and resumed, allowing for the generation of a sequence of values over time."
        },
        {
          "question": "What is a memoization in JavaScript?",
          "options": [
            "A technique used to optimize the performance of recursive functions by storing the results of expensive function calls and returning the cached result when the same inputs occur again.",
            "A function that has access to its own local scope as well as the scope in which it was created, even after that scope has closed.",
            "A function used to handle errors in asynchronous code.",
            "A function that modifies its arguments or performs side effects."
          ],
          "answer": "A technique used to optimize the performance of recursive functions by storing the results of expensive function calls and returning the cached result when the same inputs occur again."
        },
        {
          "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
          "options": [
            "'null' represents the intentional absence of any value, while 'undefined' represents a variable that has been declared but has not yet been assigned a value.",
            "'null' represents a variable that has been declared but has not yet been assigned a value, while 'undefined' represents the intentional absence of any value.",
            "'null' and 'undefined' are interchangeable and have no difference in JavaScript.",
            "'null' is used to indicate an error or failure condition, while 'undefined' is used to indicate the intentional absence of any value."
          ],
          "answer": "'null' represents the intentional absence of any value, while 'undefined' represents a variable that has been declared but has not yet been assigned a value."
        },
        {
          "question": "What is the 'rest' parameter in JavaScript?",
          "options": [
            "A parameter used to gather all remaining arguments into an array.",
            "A parameter used to spread an array into individual elements.",
            "A parameter used to indicate the end of a function.",
            "A parameter used to specify default values for function arguments."
          ],
          "answer": "A parameter used to gather all remaining arguments into an array."
        },
        {
          "question": "What is the 'spread' operator in JavaScript?",
          "options": [
            "An operator used to gather all remaining arguments into an array.",
            "An operator used to spread an array into individual elements.",
            "An operator used to indicate the end of a function.",
            "An operator used to specify default values for function arguments."
          ],
          "answer": "An operator used to spread an array into individual elements."
        },
        {
          "question": "What is a template literal in JavaScript?",
          "options": [
            "A special type of function that returns a string.",
            "A literal notation for representing strings, allowing for interpolation of variables and multiline strings.",
            "A method used to concatenate strings together.",
            "A keyword used to declare a new variable."
          ],
          "answer": "A literal notation for representing strings, allowing for interpolation of variables and multiline strings."
        },
        {
          "question": "What is the difference between '==', '===', '!=', and '!==' operators in JavaScript?",
          "options": [
            "'==' performs type coercion, allowing comparison of different data types, while '===' strictly compares both value and type. '!=' is the negation of '==', and '!==' is the negation of '==='. ",
            "'==' performs a strict comparison, ensuring both value and type match, while '===' allows type coercion. '!=' is the negation of '==', and '!==' is the negation of '==='. ",
            "'==' checks only for value equality, while '===' checks for both value and type equality. '!=' is the negation of '==', and '!==' is the negation of '==='. ",
            "'==' and '===' are interchangeable and have no difference. '!=' is the negation of '==', and '!==' is the negation of '==='. "
          ],
          "answer": "'==' performs type coercion, allowing comparison of different data types, while '===' strictly compares both value and type. '!=' is the negation of '==', and '!==' is the negation of '==='. "
        },
        {
          "question": "What is the purpose of the 'async' and 'await' keywords in JavaScript?",
          "options": [
            "'async' is used to declare asynchronous functions, and 'await' is used to pause the execution of an asynchronous function until a promise is resolved.",
            "'async' is used to pause the execution of a synchronous function until a promise is resolved, and 'await' is used to declare asynchronous functions.",
            "'async' is used to declare synchronous functions, and 'await' is used to pause the execution of an asynchronous function until a promise is resolved.",
            "'async' and 'await' are interchangeable and have no difference in JavaScript."
          ],
          "answer": "'async' is used to declare asynchronous functions, and 'await' is used to pause the execution of an asynchronous function until a promise is resolved."
        },
        {
          "question": "What is the purpose of the 'finally' block in a try...catch statement in JavaScript?",
          "options": [
            "To specify code to be executed if an error occurs in the try block.",
            "To specify code to be executed regardless of whether an error occurs or not.",
            "To specify code to be executed if no errors occur in the try block.",
            "To specify code to be executed after the catch block."
          ],
          "answer": "To specify code to be executed regardless of whether an error occurs or not."
        },
        {
          "question": "Convert an array of numbers to an array of their square roots.",
          "options": [
            "[1, 2, 3, 4].map(num => Math.sqrt(num))",
            "[1, 2, 3, 4].forEach(num => Math.sqrt(num))",
            "[1, 2, 3, 4].filter(num => Math.sqrt(num))",
            "[1, 2, 3, 4].reduce((acc, num) => Math.sqrt(num), [])"
          ],
          "answer": "[1, 2, 3, 4].map(num => Math.sqrt(num))"
        },
        {
          "question": "Find the sum of all numbers in an array.",
          "options": [
            "[1, 2, 3, 4].reduce((acc, num) => acc + num, 0)",
            "[1, 2, 3, 4].map(num => num + num)",
            "[1, 2, 3, 4].filter(num => num > 0)",
            "[1, 2, 3, 4].forEach(num => num += num)"
          ],
          "answer": "[1, 2, 3, 4].reduce((acc, num) => acc + num, 0)"
        },
        {
          "question": "Filter even numbers from an array.",
          "options": [
            "[1, 2, 3, 4].filter(num => num % 2 === 0)",
            "[1, 2, 3, 4].map(num => num % 2 === 0)",
            "[1, 2, 3, 4].reduce((acc, num) => num % 2 === 0 ? [...acc, num] : acc, [])",
            "[1, 2, 3, 4].forEach(num => num % 2 === 0)"
          ],
          "answer": "[1, 2, 3, 4].filter(num => num % 2 === 0)"
        },
        {
          "question": "Find the maximum number in an array.",
          "options": [
            "Math.max(...[1, 2, 3, 4])",
            "[1, 2, 3, 4].reduce((max, num) => num > max ? num : max, 0)",
            "[1, 2, 3, 4].sort((a, b) => b - a)[0]",
            "[1, 2, 3, 4].forEach(num => num > max ? max = num : null)"
          ],
          "answer": "[1, 2, 3, 4].reduce((max, num) => num > max ? num : max, 0)"
        },
        {
          "question": "Calculate the factorial of a given number.",
          "options": [
            "function factorial(num) { return num <= 1 ? 1 : num * factorial(num - 1); } factorial(5)",
            "function factorial(num) { let result = 1; for(let i = 2; i <= num; i++) { result *= i; } return result; } factorial(5)",
            "function factorial(num) { let result = 1; while(num > 1) { result *= num; num--; } return result; } factorial(5)",
            "function factorial(num) { let result = 1; for(let i = num; i > 1; i--) { result *= i; } return result; } factorial(5)"
          ],
          "answer": "function factorial(num) { return num <= 1 ? 1 : num * factorial(num - 1); } factorial(5)"
        },
        {
          "question": "Reverse a string.",
          "options": [
            "'hello'.split('').reverse().join('')",
            "'hello'.slice().reverse().join('')",
            "'hello'.substr().reverse().join('')",
            "'hello'.substring().reverse().join('')"
          ],
          "answer": "'hello'.split('').reverse().join('')"
        },
        {
          "question": "Check if a given string is a palindrome.",
          "options": [
            "'racecar' === 'racecar'.split('').reverse().join('')",
            "'hello' === 'hello'.split('').reverse().join('')",
            "'level' === 'level'.slice().reverse().join('')",
            "'world' === 'world'.substr().reverse().join('')"
          ],
          "answer": "'racecar' === 'racecar'.split('').reverse().join('')"
        },
        {
          "question": "Find the length of the longest word in a given sentence.",
          "options": [
            "'The quick brown fox jumps over the lazy dog'.split(' ').reduce((max, word) => Math.max(max, word.length), 0)",
            "'The quick brown fox jumps over the lazy dog'.split(' ').map(word => word.length).reduce((max, length) => Math.max(max, length), 0)",
            "'The quick brown fox jumps over the lazy dog'.split(' ').filter(word => word.length).reduce((max, length) => Math.max(max, length), 0)",
            "'The quick brown fox jumps over the lazy dog'.split(' ').forEach(word => word.length > max ? max = word.length : null)"
          ],
          "answer": "'The quick brown fox jumps over the lazy dog'.split(' ').reduce((max, word) => Math.max(max, word.length), 0)"
        },
        {
          "question": "Count the number of vowels in a given string.",
          "options": [
            "'hello'.match(/[aeiou]/gi).length",
            "'hello'.split('').filter(char => ['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase())).length",
            "'hello'.split('').reduce((count, char) => ['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase()) ? count + 1 : count, 0)",
            "'hello'.split('').forEach(char => ['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase()) ? count++ : null)"
          ],
          "answer": "'hello'.split('').filter(char => ['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase())).length"
        },
        {
          "question": "Check if a given number is prime.",
          "options": [
            "function isPrime(num) { if(num <= 1) return false; for(let i = 2; i <= Math.sqrt(num); i++) { if(num % i === 0) return false; } return true; } isPrime(7)",
            "function isPrime(num) { if(num <= 1) return false; for(let i = 2; i <= num / 2; i++) { if(num % i === 0) return false; } return true; } isPrime(7)",
            "function isPrime(num) { if(num <= 1) return false; for(let i = 2; i < num; i++) { if(num % i === 0) return false; } return true; } isPrime(7)",
            "function isPrime(num) { if(num <= 1) return false; for(let i = 2; i < num; i++) { if(num % i !== 0) return true; } return false; } isPrime(7)"
          ],
          "answer": "function isPrime(num) { if(num <= 1) return false; for(let i = 2; i <= Math.sqrt(num); i++) { if(num % i === 0) return false; } return true; } isPrime(7)"
        },
        {
          "question": "Find the intersection of two arrays.",
          "options": [
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const intersection = array1.filter(value => array2.includes(value)); intersection",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const intersection = array1.map(value => array2.includes(value)); intersection",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const intersection = array1.reduce((acc, value) => array2.includes(value) ? [...acc, value] : acc, []); intersection",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const intersection = array1.forEach(value => array2.includes(value) ? value : null); intersection"
          ],
          "answer": "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const intersection = array1.filter(value => array2.includes(value)); intersection"
        },
        {
          "question": "Find the union of two arrays.",
          "options": [
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const union = [...new Set([...array1, ...array2])]; union",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const union = array1.concat(array2.filter(value => !array1.includes(value))); union",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const union = array1.reduce((acc, value) => array2.includes(value) ? acc : [...acc, value], array2); union",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const union = array1.map(value => array2.includes(value) ? value : null).concat(array2); union"
          ],
          "answer": "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const union = [...new Set([...array1, ...array2])]; union"
        },
        {
          "question": "Find the difference between two arrays.",
          "options": [
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const difference = array1.filter(value => !array2.includes(value)); difference",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const difference = array1.map(value => !array2.includes(value) ? value : null); difference",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const difference = array1.reduce((acc, value) => !array2.includes(value) ? [...acc, value] : acc, []); difference",
            "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const difference = array1.concat(array2.filter(value => !array1.includes(value))); difference"
          ],
          "answer": "const array1 = [1, 2, 3]; const array2 = [2, 3, 4]; const difference = array1.filter(value => !array2.includes(value)); difference"
        },
        {
          "question": "Remove duplicate elements from an array.",
          "options": [
            "[...new Set([1, 2, 2, 3, 3, 4])]",
            "[1, 2, 2, 3, 3, 4].reduce((acc, value) => acc.includes(value) ? acc : [...acc, value], [])",
            "[1, 2, 2, 3, 3, 4].filter((value, index, self) => self.indexOf(value) === index)",
            "[1, 2, 2, 3, 3, 4].map((value, index, self) => self.indexOf(value) === index ? value : null)"
          ],
          "answer": "[...new Set([1, 2, 2, 3, 3, 4])]"
        },
        {
          "question": "Sort an array of numbers in ascending order.",
          "options": [
            "[3, 1, 4, 2].sort((a, b) => a - b)",
            "[3, 1, 4, 2].reduce((acc, num) => acc < num ? acc : num, Infinity)",
            "[3, 1, 4, 2].map(num => num).sort()",
            "[3, 1, 4, 2].forEach(num => num).sort()"
          ],
          "answer": "[3, 1, 4, 2].sort((a, b) => a - b)"
        },
        {
          "question": "Check if a given value is an array.",
          "options": [
            "Array.isArray([1, 2, 3])",
            "[1, 2, 3].isArray()",
            "[1, 2, 3].isAnArray()",
            "isArray([1, 2, 3])"
          ],
          "answer": "Array.isArray([1, 2, 3])"
        },
        {
          "question": "Convert a string to uppercase.",
          "options": [
            "'hello'.toUpperCase()",
            "'hello'.toUpper()",
            "'hello'.toUpperCaseCase()",
            "'hello'.toUpperCased()"
          ],
          "answer": "'hello'.toUpperCase()"
        },
        {
          "question": "Convert a string to lowercase.",
          "options": [
            "'HELLO'.toLowerCase()",
            "'HELLO'.toLower()",
            "'HELLO'.toLowerCaseCase()",
            "'HELLO'.toLowerCased()"
          ],
          "answer": "'HELLO'.toLowerCase()"
        },
        {
          "question": "Get the current date and time.",
          "options": [
            "new Date()",
            "Date.now()",
            "new Date().toLocaleString()",
            "new Date().toString()"
          ],
          "answer": "new Date()"
        },
        {
          "question": "Get the year from a given date object.",
          "options": [
            "new Date().getFullYear()",
            "new Date().getYear()",
            "new Date().getYear() + 1900",
            "new Date().getDate()"
          ],
          "answer": "new Date().getFullYear()"
        },
        {
          "question": "Get the month from a given date object (0-indexed).",
          "options": [
            "new Date().getMonth()",
            "new Date().getMonth() + 1",
            "new Date().getMonth() - 1",
            "new Date().getDate()"
          ],
          "answer": "new Date().getMonth()"
        },
        {
          "question": "Get the day of the month from a given date object.",
          "options": [
            "new Date().getDate()",
            "new Date().getDay()",
            "new Date().getMonth()",
            "new Date().getFullYear()"
          ],
          "answer": "new Date().getDate()"
        },
        {
          "question": "Get the day of the week from a given date object (0-indexed, where 0 represents Sunday).",
          "options": [
            "new Date().getDay()",
            "new Date().getWeekDay()",
            "new Date().getWeekday()",
            "new Date().getDayOfWeek()"
          ],
          "answer": "new Date().getDay()"
        },
        {
          "question": "Get the hour from a given date object.",
          "options": [
            "new Date().getHours()",
            "new Date().getHour()",
            "new Date().getMinutes()",
            "new Date().getTime()"
          ],
          "answer": "new Date().getHours()"
        },
        {
          "question": "Create a new date object representing a specific date (year, month, day, hours, minutes, seconds, milliseconds).",
          "options": [
            "new Date(2023, 11, 31, 23, 59, 59, 999)",
            "new Date(2023, 12, 31, 23, 59, 59, 999)",
            "new Date(2023, 11, 31, 24, 59, 59, 999)",
            "new Date(2023, 12, 31, 24, 59, 59, 999)"
          ],
          "answer": "new Date(2023, 11, 31, 23, 59, 59, 999)"
        },
        {
          "question": "Get the number of milliseconds since the Unix Epoch.",
          "options": [
            "Date.now()",
            "new Date().getTime()",
            "new Date().getMilliseconds()",
            "new Date().getTimeStamp()"
          ],
          "answer": "Date.now()"
        },
        {
          "question": "Calculate the square of a given number.",
          "options": [
            "num => num * num",
            "num => Math.pow(num, 2)",
            "num => num ** 2",
            "num => num + num"
          ],
          "answer": "num => num * num"
        },
        {
          "question": "Calculate the square of a given number.",
          "options": [
            "num => num * num",
            "num => Math.pow(num, 2)",
            "num => num ** 2",
            "num => num + num"
          ],
          "answer": "num => num * num"
        },
        {
          "question": "Find the absolute value of a given number.",
          "options": [
            "num => Math.abs(num)",
            "num => -num",
            "num => num.abs()",
            "num => |num|"
          ],
          "answer": "num => Math.abs(num)"
        },
        {
          "question": "Create a function that returns the sum of all arguments passed to it.",
          "options": [
            "function sum(...args) { return args.reduce((acc, num) => acc + num, 0); } sum(1, 2, 3, 4)",
            "function sum(args) { return args.reduce((acc, num) => acc + num, 0); } sum([1, 2, 3, 4])",
            "function sum(...args) { return args.map(num => num).reduce((acc, num) => acc + num, 0); } sum(1, 2, 3, 4)",
            "function sum(args) { return args.map(num => num).reduce((acc, num) => acc + num, 0); } sum([1, 2, 3, 4])"
          ],
          "answer": "function sum(...args) { return args.reduce((acc, num) => acc + num, 0); } sum(1, 2, 3, 4)"
        },
        {
          "question": "Create a function that returns the product of all arguments passed to it.",
          "options": [
            "function product(...args) { return args.reduce((acc, num) => acc * num, 1); } product(1, 2, 3, 4)",
            "function product(args) { return args.reduce((acc, num) => acc * num, 1); } product([1, 2, 3, 4])",
            "function product(...args) { return args.map(num => num).reduce((acc, num) => acc * num, 1); } product(1, 2, 3, 4)",
            "function product(args) { return args.map(num => num).reduce((acc, num) => acc * num, 1); } product([1, 2, 3, 4])"
          ],
          "answer": "function product(...args) { return args.reduce((acc, num) => acc * num, 1); } product(1, 2, 3, 4)"
        },
        {
          "question": "Create a function that checks if a given string is a valid email address.",
          "options": [
            "function isValidEmail(email) { return /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email); } isValidEmail('test@example.com')",
            "function isValidEmail(email) { return /\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b/i.test(email); } isValidEmail('test@example.com')",
            "function isValidEmail(email) { return /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/.test(email); } isValidEmail('test@example.com')",
            "function isValidEmail(email) { return /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/.test(email); } isValidEmail('test@example.com')"
          ],
          "answer": "function isValidEmail(email) { return /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email); } isValidEmail('test@example.com')"
        },
        {
          "question": "Create a function that capitalizes the first letter of each word in a given sentence.",
          "options": [
            "function capitalize(sentence) { return sentence.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '); } capitalize('hello world')",
            "function capitalize(sentence) { return sentence.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '); } capitalize(['hello', 'world'])",
            "function capitalize(sentence) { return sentence.split(' ').forEach(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '); } capitalize('hello world')",
            "function capitalize(sentence) { return sentence.map(word => word.charAt(0).toUpperCase() + word.slice(1)).toString(); } capitalize(['hello', 'world'])"
          ],
          "answer": "function capitalize(sentence) { return sentence.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '); } capitalize('hello world')"
        },
        {
          "question": "What will be the result of the following JavaScript code snippet? \n\n```javascript\nconst x = 10;\nconst y = 5;\nconst result = x + y * 2;\n```",
          "options": ["20", "30", "25", "15"],
          "answer": "20"
        },
        {
          "question": "What will be the result of the following JavaScript code snippet? \n\n```javascript\nconst arr = [1, 2, 3, 4, 5];\nconst doubledArr = arr.map(num => num * 2);\ndoubledArr;",
          "options": [
            "[2, 4, 6, 8, 10]",
            "[1, 2, 3, 4, 5]",
            "[1, 4, 9, 16, 25]",
            "[2, 3, 4, 5, 6]"
          ],
          "answer": "[2, 4, 6, 8, 10]"
        },
        {
          "question": "What will be the output of the following JavaScript code snippet? \n\n```javascript\nconst x = 10;\nconst y = '5';\nconsole.log(x + y);\n```",
          "options": ["'105'", "15", "105", "Error"],
          "answer": "'105'"
        },
        {
          "question": "What does the 'NaN' keyword represent in JavaScript?",
          "options": [
            "'Not a Null'",
            "'Null or Not'",
            "'Not a Number'",
            "'Number and Null'"
          ],
          "answer": "'Not a Number'"
        },
        {
          "question": "What will be the result of the following JavaScript code snippet? \n\n```javascript\nconst x = 10;\nconst y = '5';\nconsole.log(x == y);\n```",
          "options": ["true", "false", "Error", "NaN"],
          "answer": "false"
        },
        {
          "question": "What will be the output of the following JavaScript code snippet? \n\n```javascript\nconst x = '10';\nconst y = 5;\nconsole.log(x + y);\n```",
          "options": ["'105'", "15", "105", "Error"],
          "answer": "'105'"
        },
        {
          "question": "What is the difference between 'map()' and 'forEach()' array methods in JavaScript?",
          "options": [
            "'map()' returns a new array with the results of applying a function to each element in the array, while 'forEach()' executes a provided function once for each array element with no return value.",
            "'forEach()' returns a new array with the results of applying a function to each element in the array, while 'map()' executes a provided function once for each array element with no return value.",
            "'map()' executes a provided function once for each array element with no return value, while 'forEach()' returns a new array with the results of applying a function to each element in the array.",
            "'forEach()' executes a provided function once for each array element with no return value, while 'map()' returns a new array with the results of applying a function to each element in the array."
          ],
          "answer": "'map()' returns a new array with the results of applying a function to each element in the array, while 'forEach()' executes a provided function once for each array element with no return value."
        },
        {
          "question": "Explain the concept of lexical scope in JavaScript.",
          "options": [
            "Lexical scope means that the scope of a variable is determined by its location within the source code and nested functions have access to variables declared in their outer scope.",
            "Lexical scope means that the scope of a variable is determined by its location within the execution stack and nested functions do not have access to variables declared in their outer scope.",
            "Lexical scope means that the scope of a variable is determined by its location within the execution context and nested functions have access to variables declared in their outer scope.",
            "Lexical scope means that the scope of a variable is determined by its location within the global scope and nested functions do not have access to variables declared in their outer scope."
          ],
          "answer": "Lexical scope means that the scope of a variable is determined by its location within the source code and nested functions have access to variables declared in their outer scope."
        },
        {
          "question": "Explain the concept of event bubbling in JavaScript.",
          "options": [
            "Event bubbling is the process of event propagation from the innermost target element to the outermost ancestor element.",
            "Event bubbling is the process of event propagation from the outermost ancestor element to the innermost target element.",
            "Event bubbling is the process of event propagation in a straight line from the source element to the target element.",
            "Event bubbling is the process of event propagation in a circular manner within the DOM hierarchy."
          ],
          "answer": "Event bubbling is the process of event propagation from the innermost target element to the outermost ancestor element."
        },
        {
          "question": "Explain the concept of hoisting in JavaScript.",
          "options": [
            "Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their containing scope during the compilation phase.",
            "Hoisting is a JavaScript mechanism where variables and function declarations are moved to the bottom of their containing scope during the execution phase.",
            "Hoisting is a JavaScript mechanism where variables and function declarations are removed from their containing scope during the compilation phase.",
            "Hoisting is a JavaScript mechanism where variables and function declarations are removed from their containing scope during the execution phase."
          ],
          "answer": "Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their containing scope during the compilation phase."
        },
        {
          "question": "What is the purpose of the 'use strict' directive in JavaScript?",
          "options": [
            "'use strict' is used to enable strict mode, which catches common coding errors and prevents certain actions.",
            "'use strict' is used to disable strict mode, which allows more lenient interpretation of code.",
            "'use strict' is used to indicate that the code should be executed in asynchronous mode.",
            "'use strict' is used to indicate that the code should be executed in synchronous mode."
          ],
          "answer": "'use strict' is used to enable strict mode, which catches common coding errors and prevents certain actions."
        },
        {
          "question": "What is the purpose of the 'prototype' property in JavaScript?",
          "options": [
            "The 'prototype' property is used to add new properties and methods to an existing object's prototype.",
            "The 'prototype' property is used to define the parent object of a child object.",
            "The 'prototype' property is used to define the prototype of a function object.",
            "The 'prototype' property is used to define the constructor of a function object."
          ],
          "answer": "The 'prototype' property is used to add new properties and methods to an existing object's prototype."
        },
        {
          "question": "What does the 'map' method do in JavaScript?",
          "options": [
            "The 'map' method is used to filter elements in an array based on a condition.",
            "The 'map' method is used to iterate over an array and modify each element based on a given function.",
            "The 'map' method is used to remove duplicate elements from an array.",
            "The 'map' method is used to sort the elements of an array."
          ],
          "answer": "The 'map' method is used to iterate over an array and modify each element based on a given function."
        },
        {
          "question": "What does the 'filter' method do in JavaScript?",
          "options": [
            "The 'filter' method is used to iterate over an array and modify each element based on a given function.",
            "The 'filter' method is used to remove duplicate elements from an array.",
            "The 'filter' method is used to filter elements in an array based on a condition.",
            "The 'filter' method is used to sort the elements of an array."
          ],
          "answer": "The 'filter' method is used to filter elements in an array based on a condition."
        },
        {
          "question": "What does the 'reduce' method do in JavaScript?",
          "options": [
            "The 'reduce' method is used to filter elements in an array based on a condition.",
            "The 'reduce' method is used to remove duplicate elements from an array.",
            "The 'reduce' method is used to sort the elements of an array.",
            "The 'reduce' method is used to reduce an array to a single value based on a given function."
          ],
          "answer": "The 'reduce' method is used to reduce an array to a single value based on a given function."
        },
        {
          "question": "What does the 'sort' method do in JavaScript?",
          "options": [
            "The 'sort' method is used to filter elements in an array based on a condition.",
            "The 'sort' method is used to remove duplicate elements from an array.",
            "The 'sort' method is used to sort the elements of an array.",
            "The 'sort' method is used to iterate over an array and modify each element based on a given function."
          ],
          "answer": "The 'sort' method is used to sort the elements of an array."
        },
        {
          "question": "What is the purpose of the 'event.preventDefault()' method in JavaScript?",
          "options": [
            "The 'event.preventDefault()' method is used to stop the propagation of an event to its parent elements.",
            "The 'event.preventDefault()' method is used to prevent the default behavior associated with an event.",
            "The 'event.preventDefault()' method is used to trigger a default behavior for a specific event.",
            "The 'event.preventDefault()' method is used to remove an event listener from an element."
          ],
          "answer": "The 'event.preventDefault()' method is used to prevent the default behavior associated with an event."
        }
      ]
    },
    {
      "title": "Accessibility",
      "icon": "/assets/images/icon-accessibility.svg",
      "questions": [
        {
          "question": "What does 'WCAG' stand for?",
          "options": [
            "Web Content Accessibility Guidelines",
            "Web Compliance Accessibility Guide",
            "Web Content Accessibility Goals",
            "Website Compliance and Accessibility Guidelines"
          ],
          "answer": "Web Content Accessibility Guidelines"
        },
        {
          "question": "Which element is used to provide alternative text for images for screen reader users?",
          "options": [
            "<alt>",
            "<figcaption>",
            "<description>",
            "<img alt='description'>"
          ],
          "answer": "<img alt='description'>"
        },
        {
          "question": "What does ARIA stand for in web development?",
          "options": [
            "Accessible Rich Internet Applications",
            "Advanced Responsive Internet Assistance",
            "Accessible Responsive Internet Applications",
            "Automated Responsive Internet Actions"
          ],
          "answer": "Accessible Rich Internet Applications"
        },
        {
          "question": "Which of the following is not a principle of the WCAG?",
          "options": [
            "Perceivable",
            "Dependable",
            "Operable",
            "Understandable"
          ],
          "answer": "Dependable"
        },
        {
          "question": "Which of these color contrast ratios defines the minimum WCAG 2.1 Level AA requirement for normal text?",
          "options": ["3:1", "4.5:1", "7:1", "2:1"],
          "answer": "4.5:1"
        },
        {
          "question": "Which of the following elements is inherently focusable, meaning it can receive focus without a 'tabindex' attribute?",
          "options": ["<div>", "<span>", "<a href='...'>", "<p>"],
          "answer": "<a href='...'>"
        },
        {
          "question": "What is the purpose of the 'lang' attribute in an HTML page?",
          "options": [
            "To specify the scripting language",
            "To define the character set",
            "To indicate the language of the page content",
            "To declare a language pack"
          ],
          "answer": "To indicate the language of the page content"
        },
        {
          "question": "Which guideline ensures that content is accessible by keyboard as well as by mouse?",
          "options": [
            "Keyboard Accessible",
            "Mouse Independence",
            "Device Independence",
            "Operable Controls"
          ],
          "answer": "Keyboard Accessible"
        },
        {
          "question": "What is the role of 'skip navigation' links in web accessibility?",
          "options": [
            "To skip over primary navigation to the main content",
            "To provide shortcuts to different sections of the website",
            "To help users skip unwanted sections like advertisements",
            "To bypass broken links in the navigation"
          ],
          "answer": "To skip over primary navigation to the main content"
        },
        {
          "question": "Which of these tools can help in checking the accessibility of a website?",
          "options": [
            "W3C Validator",
            "Google Lighthouse",
            "CSS Validator",
            "JavaScript Console"
          ],
          "answer": "Google Lighthouse"
        },
        {
          "question": "Why is semantic HTML important for accessibility?",
          "options": [
            "Semantic HTML ensures that web pages are visually appealing to users with disabilities.",
            "Semantic HTML helps search engines understand the content and structure of web pages.",
            "Semantic HTML enables developers to create complex animations and transitions.",
            "Semantic HTML provides additional security features to protect against cyberattacks."
          ],
          "answer": "Semantic HTML helps search engines understand the content and structure of web pages."
        },
        {
          "question": "What is the purpose of ARIA roles in web development?",
          "options": [
            "ARIA roles are used to specify the appearance of HTML elements.",
            "ARIA roles are used to define the structure and behavior of web components for assistive technologies.",
            "ARIA roles are used to enforce access restrictions on certain web pages.",
            "ARIA roles are used to generate dynamic content on web pages."
          ],
          "answer": "ARIA roles are used to define the structure and behavior of web components for assistive technologies."
        },
        {
          "question": "What is the significance of providing alternative text for images in web development?",
          "options": [
            "Alternative text enhances the visual appearance of images on web pages.",
            "Alternative text helps to improve website loading speed.",
            "Alternative text provides a description of images for users who cannot see them, such as those using screen readers.",
            "Alternative text prevents images from being displayed on web pages."
          ],
          "answer": "Alternative text provides a description of images for users who cannot see them, such as those using screen readers."
        },
        {
          "question": "How can developers ensure keyboard accessibility in web applications?",
          "options": [
            "By providing keyboard shortcuts for common actions.",
            "By disabling keyboard input to focus solely on mouse interaction.",
            "By using complex animations that rely only on mouse hover events.",
            "By restricting navigation to mouse clicks only."
          ],
          "answer": "By providing keyboard shortcuts for common actions."
        },
        {
          "question": "What is the purpose of the 'tabindex' attribute in HTML?",
          "options": [
            "The 'tabindex' attribute is used to specify the position of an element within the document.",
            "The 'tabindex' attribute is used to set the font size of an element.",
            "The 'tabindex' attribute is used to indicate whether an element should be visible or hidden on the web page.",
            "The 'tabindex' attribute is used to define the order in which elements receive focus when navigating using the keyboard."
          ],
          "answer": "The 'tabindex' attribute is used to define the order in which elements receive focus when navigating using the keyboard."
        },
        {
          "question": "What is the purpose of landmark roles in accessibility?",
          "options": [
            "Landmark roles are used to define the geographical location of a web page.",
            "Landmark roles are used to mark important sections of a web page to assistive technologies.",
            "Landmark roles are used to specify the background image of a web page.",
            "Landmark roles are used to set the language of a web page."
          ],
          "answer": "Landmark roles are used to mark important sections of a web page to assistive technologies."
        },
        {
          "question": "How can developers ensure text readability for users with visual impairments?",
          "options": [
            "By using a small font size for better readability.",
            "By using complex typography and decorative fonts.",
            "By ensuring sufficient color contrast between text and background.",
            "By using images instead of text for content."
          ],
          "answer": "By ensuring sufficient color contrast between text and background."
        },
        {
          "question": "What is the purpose of the 'aria-describedby' attribute in web development?",
          "options": [
            "The 'aria-describedby' attribute is used to specify the width of an element.",
            "The 'aria-describedby' attribute is used to define the font style of an element.",
            "The 'aria-describedby' attribute is used to provide additional descriptive text for an element.",
            "The 'aria-describedby' attribute is used to indicate the language of an element."
          ],
          "answer": "The 'aria-describedby' attribute is used to provide additional descriptive text for an element."
        },
        {
          "question": "How can developers ensure screen reader compatibility in web applications?",
          "options": [
            "By using complex visual effects and animations.",
            "By avoiding the use of headings and landmarks.",
            "By providing descriptive alternative text for images and other non-text content.",
            "By using inline styles for all elements."
          ],
          "answer": "By providing descriptive alternative text for images and other non-text content."
        },
        {
          "question": "What is the purpose of semantic HTML elements like <header>, <nav>, and <footer>?",
          "options": [
            "Semantic HTML elements are used for decorative purposes only.",
            "Semantic HTML elements help to structure a web page and provide meaning to its content.",
            "Semantic HTML elements are used to apply styles and layout to a web page.",
            "Semantic HTML elements are used to embed multimedia content."
          ],
          "answer": "Semantic HTML elements help to structure a web page and provide meaning to its content."
        },
        {
          "question": "How can you ensure a button is accessible and keyboard-friendly in HTML?",
          "options": [
            "By using <a> tag instead of <button> tag.",
            "By using inline styles to style the button.",
            "By not providing any text or label for the button.",
            "By using appropriate HTML attributes like tabindex and aria-label."
          ],
          "answer": "By using appropriate HTML attributes like tabindex and aria-label."
        },
        {
          "question": "How can you ensure a form input field is accessible in HTML?",
          "options": [
            "By using <span> tag instead of <input> tag.",
            "By using inline styles to style the input field.",
            "By not providing any placeholder text for the input field.",
            "By using appropriate HTML attributes like aria-label and aria-describedby."
          ],
          "answer": "By using appropriate HTML attributes like aria-label and aria-describedby."
        },
        {
          "question": "How can you ensure a table is accessible in HTML?",
          "options": [
            "By using <div> elements instead of <table> elements.",
            "By not providing any headers for the table columns.",
            "By using appropriate HTML attributes like <caption>, <thead>, <tbody>, and <th>.",
            "By using inline styles to style the table."
          ],
          "answer": "By using appropriate HTML attributes like <caption>, <thead>, <tbody>, and <th>."
        },
        {
          "question": "How can you ensure an image is accessible in HTML?",
          "options": [
            "By not providing an 'alt' attribute for the image.",
            "By using complex image formats that are not supported by screen readers.",
            "By ensuring the 'alt' attribute accurately describes the content or purpose of the image.",
            "By embedding images directly within CSS files."
          ],
          "answer": "By ensuring the 'alt' attribute accurately describes the content or purpose of the image."
        },
        {
          "question": "How can you ensure a link is accessible and keyboard-friendly in HTML?",
          "options": [
            "By using <button> tag instead of <a> tag.",
            "By using inline styles to style the link.",
            "By not providing any text or label for the link.",
            "By providing meaningful text content for the link and ensuring it can be accessed via keyboard using appropriate HTML attributes."
          ],
          "answer": "By providing meaningful text content for the link and ensuring it can be accessed via keyboard using appropriate HTML attributes."
        },
        {
          "question": "How can you ensure a document outline is accessible in HTML?",
          "options": [
            "By using <section> elements without proper nesting.",
            "By avoiding the use of headings (<h1> - <h6>) altogether.",
            "By ensuring proper nesting of heading elements (<h1> - <h6>) to create a logical document structure.",
            "By using only <div> elements for all content without any headings."
          ],
          "answer": "By ensuring proper nesting of heading elements (<h1> - <h6>) to create a logical document structure."
        },
        {
          "question": "How can you ensure a video element is accessible in HTML?",
          "options": [
            "By not providing a 'controls' attribute for the video element.",
            "By using obscure video formats that are not supported by screen readers.",
            "By ensuring the video has closed captions or subtitles.",
            "By embedding videos directly within JavaScript files."
          ],
          "answer": "By ensuring the video has closed captions or subtitles."
        },
        {
          "question": "How can you ensure a form is accessible in HTML?",
          "options": [
            "By not providing any labels for form fields.",
            "By using <div> elements instead of <form> elements.",
            "By ensuring each form control has a corresponding label.",
            "By using inline styles to style the form elements."
          ],
          "answer": "By ensuring each form control has a corresponding label."
        },
        {
          "question": "How can you ensure a slider or range input is accessible in HTML?",
          "options": [
            "By using <input type='text'> instead of <input type='range'>.",
            "By using inline styles to style the slider.",
            "By not providing any labels or instructions for the slider.",
            "By providing descriptive labels and using appropriate ARIA attributes for the slider."
          ],
          "answer": "By providing descriptive labels and using appropriate ARIA attributes for the slider."
        },
        {
          "question": "How can you ensure a modal dialog is accessible in HTML?",
          "options": [
            "By not providing any keyboard navigation options for the modal dialog.",
            "By using <div> elements instead of <dialog> elements.",
            "By ensuring focus is trapped within the modal when it is open and released when it is closed.",
            "By using inline styles to style the modal dialog."
          ],
          "answer": "By ensuring focus is trapped within the modal when it is open and released when it is closed."
        },
        {
          "question": "How can you ensure an accordion component is accessible in HTML?",
          "options": [
            "By using <div> elements without proper nesting for accordion sections.",
            "By not providing any heading elements (<h1> - <h6>) for accordion sections.",
            "By using inline styles to style the accordion component.",
            "By using appropriate HTML attributes like aria-expanded and aria-controls, and ensuring keyboard accessibility for navigating between accordion sections."
          ],
          "answer": "By using appropriate HTML attributes like aria-expanded and aria-controls, and ensuring keyboard accessibility for navigating between accordion sections."
        },
        {
          "question": "How can you ensure a dropdown menu is accessible in HTML?",
          "options": [
            "By not providing any keyboard navigation options for the dropdown menu.",
            "By using <div> elements instead of <select> elements for the dropdown menu.",
            "By using inline styles to style the dropdown menu.",
            "By providing proper keyboard navigation options and ensuring ARIA attributes like aria-haspopup and aria-expanded are used appropriately."
          ],
          "answer": "By providing proper keyboard navigation options and ensuring ARIA attributes like aria-haspopup and aria-expanded are used appropriately."
        },
        {
          "question": "How can you ensure a carousel or slider component is accessible in HTML?",
          "options": [
            "By using <div> elements without proper nesting for carousel items.",
            "By not providing any navigation controls for the carousel.",
            "By using inline styles to style the carousel component.",
            "By ensuring keyboard accessibility for navigating between carousel items and providing ARIA attributes like aria-live."
          ],
          "answer": "By ensuring keyboard accessibility for navigating between carousel items and providing ARIA attributes like aria-live."
        },
        {
          "question": "How can you ensure a tabbed interface is accessible in HTML?",
          "options": [
            "By using <div> elements without proper nesting for tab panels.",
            "By not providing any keyboard navigation options for navigating between tabs.",
            "By using inline styles to style the tabbed interface.",
            "By providing proper keyboard navigation options, ensuring ARIA attributes like aria-selected are used appropriately, and managing focus when switching between tabs."
          ],
          "answer": "By providing proper keyboard navigation options, ensuring ARIA attributes like aria-selected are used appropriately, and managing focus when switching between tabs."
        },
        {
          "question": "How can you ensure a toggle switch or checkbox is accessible in HTML?",
          "options": [
            "By not providing any labels or instructions for the toggle switch or checkbox.",
            "By using <div> elements instead of <input> elements for the toggle switch or checkbox.",
            "By ensuring proper keyboard navigation options, providing descriptive labels, and using appropriate ARIA attributes like aria-checked for the toggle switch or checkbox.",
            "By using inline styles to style the toggle switch or checkbox."
          ],
          "answer": "By ensuring proper keyboard navigation options, providing descriptive labels, and using appropriate ARIA attributes like aria-checked for the toggle switch or checkbox."
        },
        {
          "question": "How can you ensure a progress bar is accessible in HTML?",
          "options": [
            "By not providing any text content or labels for the progress bar.",
            "By using <div> elements instead of <progress> elements for the progress bar.",
            "By ensuring proper keyboard navigation options for the progress bar.",
            "By providing descriptive labels, using appropriate ARIA attributes like aria-valuenow, aria-valuemin, and aria-valuemax, and ensuring keyboard accessibility."
          ],
          "answer": "By providing descriptive labels, using appropriate ARIA attributes like aria-valuenow, aria-valuemin, and aria-valuemax, and ensuring keyboard accessibility."
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create an HTML input field with the id 'username' and a label 'Username'.",
          "options": [
            "<label for=\"username\">Username:</label>\n<input type=\"text\" id=\"username\">",
            "<label>Username:<input type=\"text\" id=\"username\"></label>",
            "<div>\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\">\n</div>",
            "<input type=\"text\" id=\"username\"><label for=\"username\">Username:</label>"
          ],
          "answer": "<label for=\"username\">Username:</label>\n<input type=\"text\" id=\"username\">"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a button with the id 'submitBtn' and the text 'Submit'.",
          "options": [
            "<button id=\"submitBtn\">Submit</button>",
            "<button>Submit<button>",
            "<button id=\"submitBtn\">Submit</button>",
            "<button id=\"submitBtn\">Submit<button>"
          ],
          "answer": "<button id=\"submitBtn\">Submit</button>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a dropdown menu with options 'Option 1', 'Option 2', and 'Option 3'.",
          "options": [
            "<select>\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</select>",
            "<select>\n  <option>Option 1</option>\n  <option>Option 2</option>\n  <option>Option 3</option>\n</select>",
            "<select>\n  <option value=\"Option 1\">Option 1</option>\n  <option value=\"Option 2\">Option 2</option>\n  <option value=\"Option 3\">Option 3</option>\n</select>",
            "<select>\n  <option value=\"1\">Option 1\n  <option value=\"2\">Option 2\n  <option value=\"3\">Option 3\n</select>"
          ],
          "answer": "<select>\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</select>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a checkbox with the id 'agreeCheckbox' and a label 'I agree to the terms and conditions'.",
          "options": [
            "<input type=\"checkbox\" id=\"agreeCheckbox\"><label for=\"agreeCheckbox\">I agree to the terms and conditions</label>",
            "<label>I agree to the terms and conditions<input type=\"checkbox\" id=\"agreeCheckbox\"></label>",
            "<div><label for=\"agreeCheckbox\">I agree to the terms and conditions</label><input type=\"checkbox\" id=\"agreeCheckbox\"></div>",
            "<input type=\"checkbox\" id=\"agreeCheckbox\">I agree to the terms and conditions</input>"
          ],
          "answer": "<input type=\"checkbox\" id=\"agreeCheckbox\"><label for=\"agreeCheckbox\">I agree to the terms and conditions</label>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a radio button group with options 'Male', 'Female', and 'Other'.",
          "options": [
            "<input type=\"radio\" name=\"gender\" value=\"male\" id=\"male\"><label for=\"male\">Male</label>\n<input type=\"radio\" name=\"gender\" value=\"female\" id=\"female\"><label for=\"female\">Female</label>\n<input type=\"radio\" name=\"gender\" value=\"other\" id=\"other\"><label for=\"other\">Other</label>",
            "<input type=\"radio\" name=\"gender\" value=\"male\" id=\"male\">Male\n<input type=\"radio\" name=\"gender\" value=\"female\" id=\"female\">Female\n<input type=\"radio\" name=\"gender\" value=\"other\" id=\"other\">Other",
            "<div>\n  <input type=\"radio\" name=\"gender\" value=\"male\" id=\"male\"><label for=\"male\">Male</label>\n  <input type=\"radio\" name=\"gender\" value=\"female\" id=\"female\"><label for=\"female\">Female</label>\n  <input type=\"radio\" name=\"gender\" value=\"other\" id=\"other\"><label for=\"other\">Other</label>\n</div>",
            "<input type=\"radio\" name=\"gender\" value=\"male\" id=\"male\"><label for=\"male\">Male</label>\n<input type=\"radio\" name=\"gender\" value=\"female\" id=\"female\"><label for=\"female\">Female</label>\n<input type=\"radio\" name=\"gender\" value=\"other\" id=\"other\"><label for=\"other\">Other</label>"
          ],
          "answer": "<input type=\"radio\" name=\"gender\" value=\"male\" id=\"male\"><label for=\"male\">Male</label>\n<input type=\"radio\" name=\"gender\" value=\"female\" id=\"female\"><label for=\"female\">Female</label>\n<input type=\"radio\" name=\"gender\" value=\"other\" id=\"other\"><label for=\"other\">Other</label>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a textarea with the id 'message' and a label 'Message'.",
          "options": [
            "<label for=\"message\">Message:</label>\n<textarea id=\"message\"></textarea>",
            "<label>Message:<textarea id=\"message\"></textarea></label>",
            "<div>\n  <label for=\"message\">Message:</label>\n  <textarea id=\"message\"></textarea>\n</div>",
            "<textarea id=\"message\"></textarea><label for=\"message\">Message:</label>"
          ],
          "answer": "<label for=\"message\">Message:</label>\n<textarea id=\"message\"></textarea>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a hyperlink with the text 'Click Here' and a URL 'https://example.com'.",
          "options": [
            "<a href=\"https://example.com\">Click Here</a>",
            "<a>Click Here</a>(https://example.com)",
            "<a href=\"https://example.com\">https://example.com</a>Click Here",
            "<a href=\"https://example.com\" target=\"_blank\">Click Here</a>"
          ],
          "answer": "<a href=\"https://example.com\">Click Here</a>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create an unordered list with three list items: 'Item 1', 'Item 2', and 'Item 3'.",
          "options": [
            "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>",
            "<ul>\n  <li>Item 1\n  <li>Item 2\n  <li>Item 3\n</ul>",
            "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>",
            "<ul>Item 1</ul>\n<ul>Item 2</ul>\n<ul>Item 3</ul>"
          ],
          "answer": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a div with the class 'container' containing two paragraphs. The first paragraph should have the text 'Welcome!' and the second paragraph should have the text 'Thanks for visiting'.",
          "options": [
            "<div class=\"container\">\n  <p>Welcome!</p>\n  <p>Thanks for visiting</p>\n</div>",
            "<div class=\"container\">Welcome!</div>\n<div class=\"container\">Thanks for visiting</div>",
            "<div class=\"container\">\n  <p>Welcome!\n  <p>Thanks for visiting\n</div>",
            "<div class=\"container\"><p>Welcome!</p><p>Thanks for visiting</p></div>"
          ],
          "answer": "<div class=\"container\">\n  <p>Welcome!</p>\n  <p>Thanks for visiting</p>\n</div>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a heading with the text 'Hello World' and a level 1 heading.",
          "options": [
            "<h1>Hello World</h1>",
            "<h>Hello World</h>",
            "<heading>Hello World</heading>",
            "<h1>Heading: Hello World</h1>"
          ],
          "answer": "<h1>Hello World</h1>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a button with the text 'Click Me' that triggers an alert when clicked.",
          "options": [
            "<button onclick=\"alert('Hello!')\">Click Me</button>",
            "<button>Click Me<button>",
            "<button>Click Me</button><script>alert('Hello!')</script>",
            "<button>Click Me</button><onclick>alert('Hello!')</onclick>"
          ],
          "answer": "<button onclick=\"alert('Hello!')\">Click Me</button>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a link that opens in a new tab with the text 'Visit Example' and the URL 'https://example.com'.",
          "options": [
            "<a href=\"https://example.com\" target=\"_blank\">Visit Example</a>",
            "<a>Visit Example</a>(https://example.com)",
            "<a href=\"https://example.com\">https://example.com</a>Visit Example",
            "<a href=\"https://example.com\" target=\"_self\">Visit Example</a>"
          ],
          "answer": "<a href=\"https://example.com\" target=\"_blank\">Visit Example</a>"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create an image with the source 'image.jpg' and an alt text 'Description of the image'.",
          "options": [
            "<img src=\"image.jpg\" alt=\"Description of the image\">",
            "<img alt=\"Description of the image\">image.jpg</img>",
            "<img src=\"Description of the image\" alt=\"image.jpg\">",
            "<img src=\"Description of the image\" alt=\"image.jpg\">"
          ],
          "answer": "<img src=\"image.jpg\" alt=\"Description of the image\">"
        },
        {
          "question": "Complete the following task by adding the appropriate code snippet: Create a button with the class 'btn-primary' and the text 'Submit'.",
          "options": [
            "<button class=\"btn-primary\">Submit</button>",
            "<button>Submit<button class=\"btn-primary\">",
            "<button class=\"btn-primary\">Submit<button>",
            "<button class=\"btn-primary\" id=\"submitBtn\">Submit</button>"
          ],
          "answer": "<button class=\"btn-primary\">Submit</button>"
        }
      ]
    },
    {
      "title": "React",
      "icon": "/assets/images/icon-react.svg",
      "questions": [
        {
          "question": "In React, what does JSX stand for?",
          "options": [
            "JavaScript XML",
            "JavaScript XQuery",
            "JavaScript XHTML",
            "JavaScript XSL"
          ],
          "answer": "JavaScript XML"
        },
        {
          "question": "Which method is used to change the state in a React component?",
          "options": [
            "this.setState()",
            "this.changeState()",
            "this.updateState()",
            "this.modifyState()"
          ],
          "answer": "this.setState()"
        },
        {
          "question": "What is the purpose of 'props' in React?",
          "options": [
            "To store the component's internal state",
            "To pass data from parent to child components",
            "To handle events in a component",
            "To define the component's structure"
          ],
          "answer": "To pass data from parent to child components"
        },
        {
          "question": "Which lifecycle method is invoked immediately after a component is inserted into the DOM?",
          "options": [
            "componentDidMount()",
            "componentWillMount()",
            "componentWillUpdate()",
            "componentDidUpdate()"
          ],
          "answer": "componentDidMount()"
        },
        {
          "question": "What is the purpose of 'key' in React lists?",
          "options": [
            "To uniquely identify child elements",
            "To define the order of elements",
            "To style the list items",
            "To filter the list items"
          ],
          "answer": "To uniquely identify child elements"
        },
        {
          "question": "What is the correct way to render a React component?",
          "options": [
            "ReactDOM.render(<App />, document.getElementById('root'))",
            "React.renderComponent(<App />, document.getElementById('root'))",
            "React.render(<App />, document.getElementById('root'))",
            "ReactDOM.renderComponent(<App />, document.getElementById('root'))"
          ],
          "answer": "ReactDOM.render(<App />, document.getElementById('root'))"
        },
        {
          "question": "What is the purpose of 'setState' in React?",
          "options": [
            "To update the component's state",
            "To define the component's structure",
            "To render the component",
            "To handle events in a component"
          ],
          "answer": "To update the component's state"
        },
        {
          "question": "What is the purpose of the 'useState' hook in React?",
          "options": [
            "To manage component state",
            "To handle asynchronous tasks",
            "To fetch data from an API",
            "To create reusable components"
          ],
          "answer": "To manage component state"
        },
        {
          "question": "What is the role of the 'useEffect' hook in React?",
          "options": [
            "To manage component state",
            "To handle asynchronous tasks",
            "To perform side effects in function components",
            "To create reusable components"
          ],
          "answer": "To perform side effects in function components"
        },
        {
          "question": "What does the 'props' keyword represent in React?",
          "options": [
            "Properties passed to a component",
            "Private methods of a component",
            "Built-in React methods",
            "Variable declarations in a component"
          ],
          "answer": "Properties passed to a component"
        },
        {
          "question": "What is React's virtual DOM, and why is it important?",
          "options": [
            "React's virtual DOM is a physical representation of the browser's DOM.",
            "React's virtual DOM is a lightweight copy of the actual DOM that React keeps in memory and syncs with the real DOM via a process called reconciliation.",
            "React's virtual DOM is a concept used only in React Native, not in web development with React.",
            "React's virtual DOM is a feature used for server-side rendering in React applications."
          ],
          "answer": "React's virtual DOM is a lightweight copy of the actual DOM that React keeps in memory and syncs with the real DOM via a process called reconciliation."
        },
        {
          "question": "What is JSX in React?",
          "options": [
            "JSX is a JavaScript extension that allows writing HTML-like syntax within JavaScript code.",
            "JSX stands for JavaScript XML and is a syntax extension for JavaScript.",
            "JSX is a JavaScript library used for building user interfaces in React applications.",
            "JSX is an alternative to CSS for styling React components."
          ],
          "answer": "JSX stands for JavaScript XML and is a syntax extension for JavaScript."
        },
        {
          "question": "What is a React component?",
          "options": [
            "A React component is a JavaScript function used for handling HTTP requests in a React application.",
            "A React component is a reusable piece of code that returns React elements to be rendered to the DOM.",
            "A React component is a predefined layout template used for styling React applications.",
            "A React component is a built-in feature of React that manages state and props."
          ],
          "answer": "A React component is a reusable piece of code that returns React elements to be rendered to the DOM."
        },
        {
          "question": "What is the purpose of state in React?",
          "options": [
            "State in React is used for defining the layout and structure of components.",
            "State in React is used for managing data that can change over time within a component.",
            "State in React is used only for styling components.",
            "State in React is used for defining the initial props of a component."
          ],
          "answer": "State in React is used for managing data that can change over time within a component."
        },
        {
          "question": "What is React's context API used for?",
          "options": [
            "React's context API is used for creating animations in React applications.",
            "React's context API is used for managing global state that can be accessed by nested components without prop drilling.",
            "React's context API is used for handling HTTP requests in React applications.",
            "React's context API is used for styling components in React applications."
          ],
          "answer": "React's context API is used for managing global state that can be accessed by nested components without prop drilling."
        },
        {
          "question": "What is React Router used for?",
          "options": [
            "React Router is used for managing state in React applications.",
            "React Router is used for creating animations in React applications.",
            "React Router is used for handling HTTP requests in React applications.",
            "React Router is used for implementing client-side routing in React applications."
          ],
          "answer": "React Router is used for implementing client-side routing in React applications."
        },
        {
          "question": "What is the purpose of React hooks?",
          "options": [
            "React hooks are used for styling components in React applications.",
            "React hooks are used for defining the initial state of a component.",
            "React hooks are a feature that allows functional components to use state and other React features without writing a class.",
            "React hooks are used for handling HTTP requests in React applications."
          ],
          "answer": "React hooks are a feature that allows functional components to use state and other React features without writing a class."
        },
        {
          "question": "What is the useCallback hook used for in React?",
          "options": [
            "The useCallback hook is used for defining the initial state of a component.",
            "The useCallback hook is used for handling user interactions in React components.",
            "The useCallback hook is used for memoizing functions to prevent unnecessary re-renders of child components.",
            "The useCallback hook is used for styling components in React applications."
          ],
          "answer": "The useCallback hook is used for memoizing functions to prevent unnecessary re-renders of child components."
        },
        {
          "question": "What is the useMemo hook used for in React?",
          "options": [
            "The useMemo hook is used for defining the initial state of a component.",
            "The useMemo hook is used for handling user interactions in React components.",
            "The useMemo hook is used for memoizing the result of expensive calculations to prevent unnecessary re-renders of components.",
            "The useMemo hook is used for styling components in React applications."
          ],
          "answer": "The useMemo hook is used for memoizing the result of expensive calculations to prevent unnecessary re-renders of components."
        },
        {
          "question": "What is the useRef hook used for in React?",
          "options": [
            "The useRef hook is used for defining the initial state of a component.",
            "The useRef hook is used for handling user interactions in React components.",
            "The useRef hook is used for creating a mutable reference that persists across renders of a component.",
            "The useRef hook is used for styling components in React applications."
          ],
          "answer": "The useRef hook is used for creating a mutable reference that persists across renders of a component."
        },
        {
          "question": "What is server-side rendering in React?",
          "options": [
            "Server-side rendering in React is the process of rendering React components on the client-side only.",
            "Server-side rendering in React is the process of rendering React components on the server and sending the generated HTML to the client.",
            "Server-side rendering in React is the process of converting React components to static HTML files.",
            "Server-side rendering in React is the process of optimizing React components for better performance."
          ],
          "answer": "Server-side rendering in React is the process of rendering React components on the server and sending the generated HTML to the client."
        },
        {
          "question": "What is client-side rendering in React?",
          "options": [
            "Client-side rendering in React is the process of rendering React components on the server and sending the generated HTML to the client.",
            "Client-side rendering in React is the process of converting React components to static HTML files.",
            "Client-side rendering in React is the process of optimizing React components for better performance.",
            "Client-side rendering in React is the process of rendering React components directly in the browser using JavaScript."
          ],
          "answer": "Client-side rendering in React is the process of rendering React components directly in the browser using JavaScript."
        },
        {
          "question": "What is code splitting in React?",
          "options": [
            "Code splitting in React is the process of optimizing React components for better performance.",
            "Code splitting in React is the process of converting React components to static HTML files.",
            "Code splitting in React is the process of splitting a React application's bundle into smaller chunks that can be loaded on demand.",
            "Code splitting in React is the process of rendering React components directly in the browser using JavaScript."
          ],
          "answer": "Code splitting in React is the process of splitting a React application's bundle into smaller chunks that can be loaded on demand."
        },
        {
          "question": "What is React's error boundary?",
          "options": [
            "React's error boundary is a component used for handling HTTP requests in React applications.",
            "React's error boundary is a feature used for converting React components to static HTML files.",
            "React's error boundary is a component that catches JavaScript errors anywhere in its child component tree and logs those errors.",
            "React's error boundary is a component used for optimizing React components for better performance."
          ],
          "answer": "React's error boundary is a component that catches JavaScript errors anywhere in its child component tree and logs those errors."
        },
        {
          "question": "What is React's StrictMode?",
          "options": [
            "React's StrictMode is a feature used for converting React components to static HTML files.",
            "React's StrictMode is a component used for handling HTTP requests in React applications.",
            "React's StrictMode is a component that enables additional checks and warnings for its descendants.",
            "React's StrictMode is a feature used for optimizing React components for better performance."
          ],
          "answer": "React's StrictMode is a component that enables additional checks and warnings for its descendants."
        },
        {
          "question": "What is React's Fragment?",
          "options": [
            "React's Fragment is a feature used for converting React components to static HTML files.",
            "React's Fragment is a component used for handling HTTP requests in React applications.",
            "React's Fragment is a component that enables additional checks and warnings for its descendants.",
            "React's Fragment is a feature used for grouping multiple React elements without adding extra nodes to the DOM."
          ],
          "answer": "React's Fragment is a feature used for grouping multiple React elements without adding extra nodes to the DOM."
        },
        {
          "question": "What is React's memoization?",
          "options": [
            "React's memoization is a feature used for converting React components to static HTML files.",
            "React's memoization is a technique used for handling HTTP requests in React applications.",
            "React's memoization is a process of storing the results of expensive function calls and returning the cached result when the same inputs occur again.",
            "React's memoization is a feature used for optimizing React components for better performance."
          ],
          "answer": "React's memoization is a process of storing the results of expensive function calls and returning the cached result when the same inputs occur again."
        },
        {
          "question": "What is the purpose of React's Portals?",
          "options": [
            "React's Portals are used for converting React components to static HTML files.",
            "React's Portals are used for handling HTTP requests in React applications.",
            "React's Portals are used for rendering children into a DOM node that exists outside the DOM hierarchy of the parent component.",
            "React's Portals are used for optimizing React components for better performance."
          ],
          "answer": "React's Portals are used for rendering children into a DOM node that exists outside the DOM hierarchy of the parent component."
        },
        {
          "question": "What is the purpose of React's forwardRef?",
          "options": [
            "React's forwardRef is used for converting React components to static HTML files.",
            "React's forwardRef is used for handling HTTP requests in React applications.",
            "React's forwardRef is used for optimizing React components for better performance.",
            "React's forwardRef is used for passing refs through a component to its child."
          ],
          "answer": "React's forwardRef is used for passing refs through a component to its child."
        },
        {
          "question": "What is the purpose of React's createContext?",
          "options": [
            "React's createContext is used for converting React components to static HTML files.",
            "React's createContext is used for handling HTTP requests in React applications.",
            "React's createContext is used for creating a context object that can be accessed by nested components.",
            "React's createContext is used for optimizing React components for better performance."
          ],
          "answer": "React's createContext is used for creating a context object that can be accessed by nested components."
        },
        {
          "question": "What is the purpose of React's Suspense component?",
          "options": [
            "React's Suspense component is used for converting React components to static HTML files.",
            "React's Suspense component is used for handling HTTP requests in React applications.",
            "React's Suspense component is used for optimizing React components for better performance.",
            "React's Suspense component is used for handling loading states and code-splitting in React applications."
          ],
          "answer": "React's Suspense component is used for handling loading states and code-splitting in React applications."
        },
        {
          "question": "What is the purpose of React's PureComponent?",
          "options": [
            "React's PureComponent is used for converting React components to static HTML files.",
            "React's PureComponent is used for handling HTTP requests in React applications.",
            "React's PureComponent is used for optimizing React components for better performance.",
            "React's PureComponent is used for automatically implementing shouldComponentUpdate with a shallow prop and state comparison."
          ],
          "answer": "React's PureComponent is used for automatically implementing shouldComponentUpdate with a shallow prop and state comparison."
        },
        {
          "question": "What is the purpose of lifting state up in React?",
          "options": [
            "To convert React components to static HTML files.",
            "To handle HTTP requests in React applications.",
            "To manage state in a way that multiple components can share and modify the same state.",
            "To optimize React components for better performance."
          ],
          "answer": "To manage state in a way that multiple components can share and modify the same state."
        },
        {
          "question": "What is conditional rendering in React?",
          "options": [
            "Conditional rendering in React is the process of converting React components to static HTML files.",
            "Conditional rendering in React is the process of handling HTTP requests in React applications.",
            "Conditional rendering in React is the process of dynamically deciding whether to render a component or its content based on certain conditions.",
            "Conditional rendering in React is the process of optimizing React components for better performance."
          ],
          "answer": "Conditional rendering in React is the process of dynamically deciding whether to render a component or its content based on certain conditions."
        },
        {
          "question": "How would you architect a React application to handle real-time data updates efficiently?",
          "options": [
            "Implement a polling mechanism to regularly fetch updated data from the server.",
            "Utilize WebSockets or Server-Sent Events (SSE) for bidirectional communication between the client and server.",
            "Store data in local storage and periodically synchronize with the server.",
            "Use a combination of GraphQL subscriptions and caching strategies to efficiently manage real-time data."
          ],
          "answer": "Use a combination of GraphQL subscriptions and caching strategies to efficiently manage real-time data."
        },
        {
          "question": "How would you optimize the performance of a React application with a large number of components?",
          "options": [
            "Implement lazy loading to load components only when they are needed.",
            "Use inline styles for all components to minimize CSS file size.",
            "Increase the size of the virtual DOM to accommodate more components.",
            "Reduce the number of components by merging functionality into larger components."
          ],
          "answer": "Implement lazy loading to load components only when they are needed."
        },
        {
          "question": "How would you design the state management architecture for a complex React application?",
          "options": [
            "Use React's built-in state management for simplicity.",
            "Implement Redux for centralized state management and predictable state updates.",
            "Utilize Context API for managing global state across components.",
            "Combine Redux with Context API for the best of both worlds."
          ],
          "answer": "Combine Redux with Context API for the best of both worlds."
        },
        {
          "question": "You notice that your React application is experiencing slow performance during rendering. How would you diagnose and address this issue?",
          "options": [
            "Increase the size of the virtual DOM to accommodate more components.",
            "Use inline styles for all components to minimize CSS file size.",
            "Implement code-splitting and lazy loading to load components only when necessary.",
            "Optimize JavaScript functions and loops to reduce execution time."
          ],
          "answer": "Implement code-splitting and lazy loading to load components only when necessary."
        },
        {
          "question": "You're tasked with designing a scalable architecture for a large-scale React application. How would you approach this?",
          "options": [
            "Use a microservices architecture to break down the application into smaller, independently deployable services.",
            "Implement a monolithic architecture to simplify deployment and management.",
            "Utilize a serverless architecture to abstract away infrastructure management and scale automatically.",
            "Adopt a hybrid architecture combining microservices and serverless components for flexibility and scalability."
          ],
          "answer": "Adopt a hybrid architecture combining microservices and serverless components for flexibility and scalability."
        },
        {
          "question": "You're experiencing performance issues with your React application. What techniques or tools would you use to identify and resolve these issues?",
          "options": [
            "Use browser developer tools to analyze performance metrics like CPU usage and memory consumption.",
            "Implement React's Profiler API to identify performance bottlenecks in component rendering.",
            "Use performance monitoring tools like New Relic or Datadog to track application performance in production.",
            "All of the above."
          ],
          "answer": "All of the above."
        },
        {
          "question": "You need to handle asynchronous operations, such as fetching data from an API, in a React application. Which approach would you use?",
          "options": [
            "Use callbacks to handle asynchronous operations directly in component methods.",
            "Utilize promises or async/await syntax to fetch data asynchronously.",
            "Implement Redux middleware like Redux Thunk or Redux Saga to manage side effects.",
            "All of the above."
          ],
          "answer": "All of the above."
        },
        {
          "question": "You're tasked with optimizing the rendering performance of a React application. What strategies or techniques would you consider?",
          "options": [
            "Implement memoization to cache expensive function results.",
            "Use React's PureComponent or memo to prevent unnecessary re-renders of components.",
            "Apply virtualization techniques to render large lists efficiently.",
            "All of the above."
          ],
          "answer": "All of the above."
        },
        {
          "question": "How can you manage side effects, such as data fetching, in a React functional component?",
          "options": [
            "Use callbacks directly within the component to handle side effects.",
            "Utilize the useEffect hook to perform side effects.",
            "Implement Redux middleware like Redux Thunk or Redux Saga to manage side effects globally.",
            "Use async/await syntax directly within the component to handle asynchronous operations."
          ],
          "answer": "Utilize the useEffect hook to perform side effects."
        },
        {
          "question": "What technique can you use to optimize the rendering performance of a React application with a large list of items?",
          "options": [
            "Use inline styles for each item to minimize CSS file size.",
            "Apply virtualization techniques to render only the items visible in the viewport.",
            "Increase the size of the virtual DOM to accommodate the large list.",
            "Combine multiple smaller lists into a single large list for rendering efficiency."
          ],
          "answer": "Apply virtualization techniques to render only the items visible in the viewport."
        },
        {
          "question": "What are some advantages of using Redux for state management in a React application?",
          "options": [
            "Redux provides a centralized store for managing application state.",
            "Redux simplifies the process of sharing state between components.",
            "Redux enables time-travel debugging, allowing developers to replay actions and inspect state changes.",
            "Redux improves the performance of React components by reducing unnecessary re-renders."
          ],
          "answer": "Redux provides a centralized store for managing application state."
        },
        {
          "question": "You're tasked with optimizing the performance of a React application. What factors would you consider and how would you prioritize them?",
          "options": [
            "rendering performance, network requests, bundle size, state management, and component architecture. Prioritization: Identify the most impactful bottlenecks by profiling the application, address rendering performance first, optimize network requests by reducing unnecessary fetches and optimizing data transfer, then focus on reducing bundle size through code-splitting and tree-shaking, optimize state management to minimize unnecessary updates, and refactor component architecture for better organization and reusability.",
            "Only focus on rendering performance and bundle size. Prioritization: Optimize rendering performance first, then reduce bundle size through code-splitting.",
            "State management and component architecture. Prioritization: Improve state management efficiency first, then refactor component architecture for better organization.",
            "Network requests and state management. Prioritization: Optimize network requests first, then focus on improving state management efficiency."
          ],
          "answer": "rendering performance, network requests, bundle size, state management, and component architecture. Prioritization: Identify the most impactful bottlenecks by profiling the application, address rendering performance first, optimize network requests by reducing unnecessary fetches and optimizing data transfer, then focus on reducing bundle size through code-splitting and tree-shaking, optimize state management to minimize unnecessary updates, and refactor component architecture for better organization and reusability."
        },
        {
          "question": "You're working on a React project that requires integration with third-party APIs. How would you ensure reliability and performance when dealing with these external services?",
          "options": [
            "API rate limits, error handling, caching strategies, and data validation. Prioritization: First, understand the API rate limits and design a strategy to handle rate limiting effectively. Implement robust error handling to gracefully handle any API failures. Utilize caching mechanisms to reduce the number of API requests and improve performance. Finally, implement data validation to ensure the integrity of incoming data and protect against potential security vulnerabilities.",
            "Only focus on error handling. Prioritization: Implement robust error handling to gracefully handle any API failures.",
            "Only focus on caching strategies. Prioritization: Implement caching mechanisms to reduce the number of API requests and improve performance.",
            "Only focus on data validation. Prioritization: Implement data validation to ensure the integrity of incoming data and protect against potential security vulnerabilities."
          ],
          "answer": "API rate limits, error handling, caching strategies, and data validation. Prioritization: First, understand the API rate limits and design a strategy to handle rate limiting effectively. Implement robust error handling to gracefully handle any API failures. Utilize caching mechanisms to reduce the number of API requests and improve performance. Finally, implement data validation to ensure the integrity of incoming data and protect against potential security vulnerabilities."
        },
        {
          "question": "You're starting a new project with React. What factors would you consider when choosing between a monolithic architecture and a microservices architecture?",
          "options": [
            "Scalability, team size, complexity, deployment, and maintenance. Prioritization: Evaluate the scalability requirements of the project and the size of the development team. Consider the complexity of the application and the potential for future growth. Assess the deployment and maintenance overhead of each architecture. Finally, choose the architecture that best aligns with the project's goals and constraints.",
            "Only focus on scalability. Prioritization: Choose the microservices architecture for better scalability.",
            "Only focus on deployment. Prioritization: Choose the monolithic architecture for simpler deployment.",
            "Only focus on team size. Prioritization: Choose the monolithic architecture for smaller teams."
          ],
          "answer": "Scalability, team size, complexity, deployment, and maintenance. Prioritization: Evaluate the scalability requirements of the project and the size of the development team. Consider the complexity of the application and the potential for future growth. Assess the deployment and maintenance overhead of each architecture. Finally, choose the architecture that best aligns with the project's goals and constraints."
        },
        {
          "question": "You're building a complex React application that requires managing global state across multiple components. What factors would you consider when choosing between React Context API and a state management library like Redux?",
          "options": [
            "Scalability, complexity, ease of use, performance, and ecosystem support. Prioritization: Evaluate the scalability requirements of the project and the complexity of state management. Consider the ease of use and performance implications of each solution. Assess the ecosystem support and availability of third-party libraries. Finally, choose the solution that best fits the project's requirements and constraints.",
            "Only focus on performance. Prioritization: Choose Redux for better performance.",
            "Only focus on ecosystem support. Prioritization: Choose React Context API for better ecosystem support.",
            "Only focus on ease of use. Prioritization: Choose React Context API for simplicity."
          ],
          "answer": "Scalability, complexity, ease of use, performance, and ecosystem support. Prioritization: Evaluate the scalability requirements of the project and the complexity of state management. Consider the ease of use and performance implications of each solution. Assess the ecosystem support and availability of third-party libraries. Finally, choose the solution that best fits the project's requirements and constraints."
        },
        {
          "question": "You're working on a React application and notice that certain components are re-rendering unnecessarily, impacting performance. How would you optimize these components to minimize unnecessary re-renders?",
          "options": [
            "Memoization, PureComponent, shouldComponentUpdate, and React.memo. Prioritization: Evaluate the components that are re-rendering unnecessarily. Use memoization techniques like useMemo or useCallback to memoize expensive computations. Consider using PureComponent or implementing shouldComponentUpdate to prevent re-renders based on prop or state changes. Finally, apply React.memo to functional components to memoize the rendering.",
            "Only focus on PureComponent. Prioritization: Use PureComponent to prevent re-renders.",
            "Only focus on React.memo. Prioritization: Use React.memo to memoize functional components.",
            "Only focus on shouldComponentUpdate. Prioritization: Implement shouldComponentUpdate to prevent re-renders based on prop or state changes."
          ],
          "answer": "Memoization, PureComponent, shouldComponentUpdate, and React.memo. Prioritization: Evaluate the components that are re-rendering unnecessarily. Use memoization techniques like useMemo or useCallback to memoize expensive computations. Consider using PureComponent or implementing shouldComponentUpdate to prevent re-renders based on prop or state changes. Finally, apply React.memo to functional components to memoize the rendering."
        }
      ]
    },
    {
      "title": "Node.js",
      "icon": "/assets/images/icon-nodejs.svg",
      "questions": [
        {
          "question": "What is Node.js primarily used for?",
          "options": [
            "Client-side scripting",
            "Server-side scripting",
            "Database management",
            "Frontend development"
          ],
          "answer": "Server-side scripting"
        },
        {
          "question": "Which command is used to install packages in Node.js?",
          "options": [
            "npm install",
            "node install",
            "install package",
            "npm add"
          ],
          "answer": "npm install"
        },
        {
          "question": "What is the purpose of 'package.json' in a Node.js project?",
          "options": [
            "To store the project's source code",
            "To define the project's dependencies and scripts",
            "To run the project on a server",
            "To manage the project's database"
          ],
          "answer": "To define the project's dependencies and scripts"
        },
        {
          "question": "Which module is used to create a web server in Node.js?",
          "options": ["http", "server", "web", "express"],
          "answer": "http"
        },
        {
          "question": "What is the purpose of 'require' in Node.js?",
          "options": [
            "To include external modules",
            "To define variables",
            "To create functions",
            "To install packages"
          ],
          "answer": "To include external modules"
        },
        {
          "question": "Which command is used to start a Node.js server?",
          "options": [
            "node start",
            "npm run server",
            "npm start",
            "node server"
          ],
          "answer": "npm start"
        },
        {
          "question": "What is the purpose of 'module.exports' in Node.js?",
          "options": [
            "To import modules",
            "To export modules",
            "To define variables",
            "To create functions"
          ],
          "answer": "To export modules"
        },
        {
          "question": "Which module is used to interact with the file system in Node.js?",
          "options": ["fs", "file", "system", "io"],
          "answer": "fs"
        },
        {
          "question": "What is the purpose of 'npm' in Node.js?",
          "options": [
            "To manage project dependencies",
            "To create web servers",
            "To install Node.js",
            "To run JavaScript code"
          ],
          "answer": "To manage project dependencies"
        },
        {
          "question": "Which command is used to install Node.js on your system?",
          "options": [
            "node install",
            "npm install node",
            "npm install",
            "node setup"
          ],
          "answer": "npm install"
        },
        {
          "question": "What is the Event Loop in Node.js, and how does it contribute to its asynchronous nature?",
          "options": [
            "It's a loop that iterates through event listeners and executes them synchronously.",
            "It's a mechanism for handling asynchronous operations by managing callback functions and their execution order.",
            "It's a feature for preventing memory leaks by garbage collecting unused objects.",
            "It's a data structure for organizing event-driven code in a hierarchical manner."
          ],
          "answer": "It's a mechanism for handling asynchronous operations by managing callback functions and their execution order."
        },
        {
          "question": "What is the purpose of the 'require' function in Node.js, and how does it differ from importing modules in frontend JavaScript?",
          "options": [
            "It's used to define dependencies in Node.js projects and is similar to the 'import' keyword in frontend JavaScript.",
            "It's used to load modules or files in Node.js and is synchronous, unlike the asynchronous nature of importing modules in frontend JavaScript.",
            "It's used to inject external libraries into Node.js projects and doesn't require specifying file paths, unlike in frontend JavaScript.",
            "It's used to execute code in parallel with other modules and is optimized for performance in Node.js environments."
          ],
          "answer": "It's used to load modules or files in Node.js and is synchronous, unlike the asynchronous nature of importing modules in frontend JavaScript."
        },
        {
          "question": "Explain the concept of 'streams' in Node.js and provide an example of their practical use.",
          "options": [
            "Streams are continuous flows of data in Node.js, allowing for efficient processing of large files or network data. An example is reading a large file chunk by chunk using the 'fs' module.",
            "Streams are collections of asynchronous operations in Node.js, enabling parallel execution of tasks. An example is using the 'async' library to manage multiple database queries simultaneously.",
            "Streams are functions in Node.js for manipulating data structures, providing methods like 'map' and 'filter' for array processing. An example is transforming JSON data using the 'lodash' library.",
            "Streams are event emitters in Node.js, facilitating communication between different parts of a program. An example is handling user input events in a web application using the 'express' framework."
          ],
          "answer": "Streams are continuous flows of data in Node.js, allowing for efficient processing of large files or network data. An example is reading a large file chunk by chunk using the 'fs' module."
        },
        {
          "question": "What is the purpose of the 'cluster' module in Node.js, and how does it help in scaling applications?",
          "options": [
            "The 'cluster' module is used for creating child processes in Node.js, enabling parallel execution of tasks. It helps in scaling applications by utilizing multiple CPU cores efficiently.",
            "The 'cluster' module is used for managing network communication in Node.js, enabling efficient data transfer between client and server. It helps in scaling applications by optimizing network performance.",
            "The 'cluster' module is used for implementing caching mechanisms in Node.js, reducing data retrieval latency. It helps in scaling applications by improving data access speed.",
            "The 'cluster' module is used for orchestrating containerized deployments in Node.js, ensuring high availability and fault tolerance. It helps in scaling applications by automating deployment processes."
          ],
          "answer": "The 'cluster' module is used for creating child processes in Node.js, enabling parallel execution of tasks. It helps in scaling applications by utilizing multiple CPU cores efficiently."
        },
        {
          "question": "Explain the concept of 'middleware' in the context of Node.js web frameworks, and provide an example of its usage.",
          "options": [
            "Middleware are software components that intercept incoming HTTP requests in Node.js web frameworks like Express, allowing for custom processing before reaching route handlers. An example is logging request details or authenticating users before accessing protected routes.",
            "Middleware are utility functions in Node.js for manipulating data structures, providing common operations like sorting or filtering. An example is transforming JSON data before sending it to the client.",
            "Middleware are external libraries in Node.js for integrating third-party services into web applications, such as authentication providers or payment gateways. An example is using the 'passport' library for user authentication.",
            "Middleware are programming languages that compile to JavaScript and run on the Node.js runtime, offering features like static typing and pattern matching. An example is using TypeScript to develop backend services."
          ],
          "answer": "Middleware are software components that intercept incoming HTTP requests in Node.js web frameworks like Express, allowing for custom processing before reaching route handlers. An example is logging request details or authenticating users before accessing protected routes."
        },
        {
          "question": "What is the purpose of the 'os' module in Node.js?",
          "options": [
            "To provide access to operating system-related utility functions and information, such as CPU architecture and memory usage.",
            "To manage database operations in Node.js applications, such as querying and updating data.",
            "To handle asynchronous operations by managing callback functions and their execution order.",
            "To facilitate communication between different parts of a Node.js program, such as event-driven code."
          ],
          "answer": "To provide access to operating system-related utility functions and information, such as CPU architecture and memory usage."
        },
        {
          "question": "What is the significance of the 'package.json' file in a Node.js project?",
          "options": [
            "It contains metadata about the project and its dependencies, enabling package management and script execution.",
            "It defines the structure of the project's file system, organizing source code into modules and directories.",
            "It specifies configuration settings for Node.js runtime, such as environment variables and debugging options.",
            "It stores sensitive information, such as API keys and database credentials, securely encrypted for deployment."
          ],
          "answer": "It contains metadata about the project and its dependencies, enabling package management and script execution."
        },
        {
          "question": "What is 'npm' in the context of Node.js development?",
          "options": [
            "npm is the default package manager for Node.js, used for installing, managing, and sharing JavaScript packages.",
            "npm is a JavaScript runtime environment for executing server-side code, similar to Node.js.",
            "npm is a version control system for managing code repositories and tracking changes over time.",
            "npm is a build automation tool for optimizing frontend assets, such as CSS and JavaScript files."
          ],
          "answer": "npm is the default package manager for Node.js, used for installing, managing, and sharing JavaScript packages."
        },
        {
          "question": "What is the purpose of the 'npm' command in Node.js, and how does it help in managing dependencies?",
          "options": [
            "The 'npm' command is used for executing Node.js scripts asynchronously, enhancing performance by leveraging multiple CPU cores.",
            "The 'npm' command is used for installing and managing packages in Node.js projects, simplifying dependency management and ensuring consistent environments across different machines.",
            "The 'npm' command is used for profiling memory usage in Node.js applications, optimizing resource allocation and improving performance.",
            "The 'npm' command is used for deploying Node.js applications to production servers, automating deployment processes and ensuring scalability."
          ],
          "answer": "The 'npm' command is used for installing and managing packages in Node.js projects, simplifying dependency management and ensuring consistent environments across different machines."
        },
        {
          "question": "What is a callback function in Node.js, and how is it commonly used?",
          "options": [
            "A callback function is a function passed as an argument to another function, which is then invoked asynchronously to handle the result of an asynchronous operation. It's commonly used in Node.js for handling I/O operations like reading files or making network requests.",
            "A callback function is a function that returns another function, enabling functional programming paradigms in Node.js. It's commonly used for composing higher-order functions or creating custom control flow mechanisms.",
            "A callback function is a function defined within a class or module in Node.js, providing encapsulation and abstraction for reusable code blocks. It's commonly used for implementing design patterns like singleton or factory.",
            "A callback function is a function that recursively calls itself in Node.js, enabling iterative algorithms and tree traversal techniques. It's commonly used for solving problems like directory traversal or pathfinding."
          ],
          "answer": "A callback function is a function passed as an argument to another function, which is then invoked asynchronously to handle the result of an asynchronous operation. It's commonly used in Node.js for handling I/O operations like reading files or making network requests."
        },
        {
          "question": "What are the advantages of using npm scripts in a Node.js project, and how do they enhance the development workflow?",
          "options": [
            "npm scripts in a Node.js project provide a convenient way to define and run custom scripts for various tasks such as building, testing, and deployment. They enhance the development workflow by simplifying complex tasks, promoting automation, and enabling easy integration with other build tools and processes.",
            "npm scripts in a Node.js project enable developers to manage project dependencies and configurations more effectively. They enhance the development workflow by offering a centralized location to define and execute tasks like installing dependencies, starting the server, or running tests.",
            "npm scripts in a Node.js project streamline the process of managing project documentation and version control. They enhance the development workflow by automating tasks related to documentation generation, code formatting, and version tagging, thus improving project maintainability and collaboration.",
            "npm scripts in a Node.js project optimize the performance and scalability of the application. They enhance the development workflow by providing tools and utilities for profiling, debugging, and optimizing code, leading to improved application performance and user experience."
          ],
          "answer": "npm scripts in a Node.js project provide a convenient way to define and run custom scripts for various tasks such as building, testing, and deployment. They enhance the development workflow by simplifying complex tasks, promoting automation, and enabling easy integration with other build tools and processes."
        },
        {
          "question": "What is middleware in Express.js, and how does it facilitate request processing in Node.js web applications?",
          "options": [
            "Middleware in Express.js refers to functions that have access to the request and response objects and the next middleware function in the application's request-response cycle. It facilitates request processing in Node.js web applications by allowing developers to write modular, reusable code to handle common tasks such as logging, authentication, and error handling.",
            "Middleware in Express.js is a mechanism for defining routing paths and handling HTTP requests in Node.js web applications. It facilitates request processing by providing a structured way to define endpoint handlers and route requests to the appropriate controller functions based on the URL and HTTP method.",
            "Middleware in Express.js is a feature that enables developers to manage project dependencies and configurations more efficiently. It facilitates request processing by automatically resolving and injecting required middleware functions into the application's request-response cycle, improving code organization and maintainability.",
            "Middleware in Express.js is a tool for optimizing the performance of Node.js web applications. It facilitates request processing by providing utilities for caching static assets, compressing responses, and optimizing network communication, resulting in faster response times and improved scalability."
          ],
          "answer": "Middleware in Express.js refers to functions that have access to the request and response objects and the next middleware function in the application's request-response cycle. It facilitates request processing in Node.js web applications by allowing developers to write modular, reusable code to handle common tasks such as logging, authentication, and error handling."
        },
        {
          "question": "What are task runners in Node.js, and how do they streamline the automation of repetitive development tasks?",
          "options": [
            "Task runners in Node.js are tools used to automate repetitive development tasks such as compiling code, minifying files, and running tests. They streamline the automation process by allowing developers to define and execute tasks through configuration files or JavaScript code, reducing manual effort and ensuring consistency across different environments.",
            "Task runners in Node.js are modules that manage asynchronous tasks and callbacks in a Node.js application. They streamline the automation process by providing utilities for parallel execution, task scheduling, and error handling, improving code readability and maintainability.",
            "Task runners in Node.js are frameworks used to create and manage background tasks or scheduled jobs in a Node.js application. They streamline the automation process by providing APIs for task scheduling, execution monitoring, and result handling, ensuring reliable and efficient task management.",
            "Task runners in Node.js are packages that optimize the performance of asynchronous tasks and I/O operations in a Node.js application. They streamline the automation process by providing utilities for task prioritization, resource management, and concurrency control, improving overall application performance and scalability."
          ],
          "answer": "Task runners in Node.js are tools used to automate repetitive development tasks such as compiling code, minifying files, and running tests. They streamline the automation process by allowing developers to define and execute tasks through configuration files or JavaScript code, reducing manual effort and ensuring consistency across different environments."
        },
        {
          "question": "What is routing in Express.js, and how does it facilitate handling of HTTP requests in Node.js web applications?",
          "options": [
            "Routing in Express.js refers to the process of defining endpoints and mapping them to specific request-handling functions. It facilitates handling of HTTP requests in Node.js web applications by directing incoming requests to the appropriate controller functions based on the requested URL and HTTP method, enabling developers to implement different behaviors for different routes.",
            "Routing in Express.js is a mechanism for optimizing the performance of Node.js web applications. It facilitates handling of HTTP requests by providing utilities for caching static assets, compressing responses, and optimizing network communication, resulting in faster response times and improved scalability.",
            "Routing in Express.js is a feature that enables developers to manage project dependencies and configurations more efficiently. It facilitates handling of HTTP requests by automatically resolving and injecting required middleware functions into the application's request-response cycle, improving code organization and maintainability.",
            "Routing in Express.js is a tool for streamlining the process of managing project documentation and version control. It facilitates handling of HTTP requests by automating tasks related to documentation generation, code formatting, and version tagging, thus improving project maintainability and collaboration."
          ],
          "answer": "Routing in Express.js refers to the process of defining endpoints and mapping them to specific request-handling functions. It facilitates handling of HTTP requests in Node.js web applications by directing incoming requests to the appropriate controller functions based on the requested URL and HTTP method, enabling developers to implement different behaviors for different routes."
        },
        {
          "question": "What is the MVC (Model-View-Controller) architecture in Node.js, and how does it facilitate the development of scalable and maintainable web applications?",
          "options": [
            "The MVC architecture in Node.js is a design pattern that separates an application into three interconnected components: Model, View, and Controller. It facilitates the development of scalable and maintainable web applications by promoting separation of concerns, enabling developers to organize code logic, presentation, and data manipulation in a modular and cohesive manner.",
            "The MVC architecture in Node.js is a framework for managing project dependencies and configurations. It facilitates the development of scalable and maintainable web applications by providing a structured way to define and manage models, views, and controllers, ensuring consistency and ease of maintenance.",
            "The MVC architecture in Node.js is a tool for optimizing the performance and responsiveness of web applications. It facilitates the development of scalable and maintainable web applications by providing utilities for caching static assets, compressing responses, and optimizing network communication.",
            "The MVC architecture in Node.js is a feature that enables developers to streamline the process of managing project documentation and version control. It facilitates the development of scalable and maintainable web applications by automating tasks related to documentation generation, code formatting, and version tagging."
          ],
          "answer": "The MVC architecture in Node.js is a design pattern that separates an application into three interconnected components: Model, View, and Controller. It facilitates the development of scalable and maintainable web applications by promoting separation of concerns, enabling developers to organize code logic, presentation, and data manipulation in a modular and cohesive manner."
        },
        {
          "question": "What is the purpose of the 'util' module in Node.js, and how does it aid in development?",
          "options": [
            "The 'util' module in Node.js provides utility functions that are commonly used for debugging, error handling, and extending object functionality. It aids in development by offering convenient methods for working with JavaScript objects, such as inspecting object properties, converting values to different types, and formatting strings.",
            "The 'util' module in Node.js is primarily used for managing project dependencies and configurations. It aids in development by providing a structured way to define and manage utilities, ensuring consistency and ease of maintenance.",
            "The 'util' module in Node.js is a feature that enables developers to streamline the process of managing project documentation and version control. It aids in development by automating tasks related to documentation generation, code formatting, and version tagging.",
            "The 'util' module in Node.js is a framework for optimizing the performance and responsiveness of applications. It aids in development by providing utilities for profiling, debugging, and optimizing code, enabling developers to identify and address performance bottlenecks."
          ],
          "answer": "The 'util' module in Node.js provides utility functions that are commonly used for debugging, error handling, and extending object functionality. It aids in development by offering convenient methods for working with JavaScript objects, such as inspecting object properties, converting values to different types, and formatting strings."
        },
        {
          "question": "How can you create a simple HTTP server in Node.js?",
          "options": [
            "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
            "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.end('<h1>Hello, World!</h1>');\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
            "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({ message: 'Hello, World!' }));\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
            "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(404, { 'Content-Type': 'text/plain' });\n  res.end('404 - Not Found');\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
          ],
          "answer": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
        },
        {
          "question": "How can you read data from a file asynchronously in Node.js?",
          "options": [
            "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});",
            "const fs = require('fs');\n\nconst data = fs.readFileSync('example.txt', 'utf8');\nconsole.log(data);",
            "const fs = require('fs');\n\nfs.open('example.txt', 'r', (err, fd) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  fs.readFile(fd, 'utf8', (err, data) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(data);\n    fs.close(fd, (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  });\n});",
            "const fs = require('fs');\n\nfs.access('example.txt', fs.constants.F_OK, (err) => {\n  if (err) {\n    console.error('File does not exist');\n    return;\n  }\n  fs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(data);\n  });\n});"
          ],
          "answer": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});"
        },
        {
          "question": "How can you handle asynchronous operations in Node.js using promises?",
          "options": [
            "const fs = require('fs');\n\nconst readFilePromise = (file) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(data);\n    });\n  });\n};\n\nreadFilePromise('example.txt')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));",
            "const fs = require('fs').promises;\n\nfs.readFile('example.txt', 'utf8')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));",
            "const fs = require('fs');\nconst util = require('util');\nconst readFileAsync = util.promisify(fs.readFile);\n\nreadFileAsync('example.txt', 'utf8')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));",
            "const fs = require('fs');\n\nconst readFilePromise = (file) => {\n  return new Promise((resolve, reject) => {\n    fs.access(file, fs.constants.F_OK, (err) => {\n      if (err) {\n        reject('File does not exist');\n        return;\n      }\n      fs.readFile(file, 'utf8', (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(data);\n      });\n    });\n  });\n};\n\nreadFilePromise('example.txt')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
          ],
          "answer": "const fs = require('fs');\n\nconst readFilePromise = (file) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(data);\n    });\n  });\n};\n\nreadFilePromise('example.txt')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
        },
        {
          "question": "How can you install external packages in a Node.js project using npm?",
          "options": [
            "npm install package-name",
            "npm add package-name",
            "npm get package-name",
            "npm link package-name"
          ],
          "answer": "npm install package-name"
        },
        {
          "question": "How can you start a new Node.js project using npm and create a package.json file?",
          "options": ["npm init", "npm start", "npm create", "npm config"],
          "answer": "npm init"
        },
        {
          "question": "How can you install a specific version of a package using npm?",
          "options": [
            "npm install package-name@version",
            "npm install package-name --version",
            "npm install package-name -v version",
            "npm install package-name/version"
          ],
          "answer": "npm install package-name@version"
        },
        {
          "question": "How can you uninstall a package from a Node.js project using npm?",
          "options": [
            "npm uninstall package-name",
            "npm delete package-name",
            "npm remove package-name",
            "npm discard package-name"
          ],
          "answer": "npm uninstall package-name"
        },
        {
          "question": "How can you run JavaScript files using Node.js from the command line?",
          "options": [
            "node filename.js",
            "js filename.js",
            "run filename.js",
            "exec filename.js"
          ],
          "answer": "node filename.js"
        },
        {
          "question": "How can you handle environment variables in a Node.js application?",
          "options": ["process.env", "node.env", "env.process", "process.vars"],
          "answer": "process.env"
        },
        {
          "question": "How can you use the 'fs' module in Node.js to create a new file?",
          "options": [
            "fs.createFile()",
            "fs.writeFile()",
            "fs.newFile()",
            "fs.addFile()"
          ],
          "answer": "fs.writeFile()"
        },
        {
          "question": "How can you asynchronously read and write files in Node.js using the 'fs' module?",
          "options": [
            "fs.readWriteFile()",
            "fs.asyncIO()",
            "fs.promises",
            "fs.readWriteStream()"
          ],
          "answer": "fs.promises"
        },
        {
          "question": "How can you handle errors in asynchronous operations in Node.js?",
          "options": [
            "try-catch blocks",
            "error.on('async')",
            "catchError()",
            "asyncError()"
          ],
          "answer": "try-catch blocks"
        },
        {
          "question": "How can you implement a simple web server in Node.js using the 'http' module?",
          "options": [
            "http.createServer()",
            "http.newServer()",
            "http.startServer()",
            "http.buildServer()"
          ],
          "answer": "http.createServer()"
        },
        {
          "question": "How can you parse JSON data in Node.js?",
          "options": [
            "JSON.parse()",
            "parseJSON()",
            "json.decode()",
            "decodeJSON()"
          ],
          "answer": "JSON.parse()"
        },
        {
          "question": "How can you send HTTP requests in Node.js?",
          "options": [
            "http.request()",
            "http.send()",
            "http.post()",
            "http.fetch()"
          ],
          "answer": "http.request()"
        },
        {
          "question": "How can you create a basic server using Express.js?",
          "options": [
            "const express = require('express');\nconst app = express();\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
            "const express = require('express');\nconst app = express();\n\napp.start(3000, () => {\n  console.log('Server is running on port 3000');\n});",
            "const express = require('express');\nconst app = express();\n\napp.createServer(3000, () => {\n  console.log('Server is running on port 3000');\n});",
            "const express = require('express');\nconst app = express();\n\napp.open(3000, () => {\n  console.log('Server is running on port 3000');\n});"
          ],
          "answer": "const express = require('express');\nconst app = express();\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
        },
        {
          "question": "How can you define a route handler for a GET request using Express.js?",
          "options": [
            "app.route('/').get((req, res) => {\n  res.send('GET request received');\n});",
            "app.get('/', (req, res) => {\n  res.send('GET request received');\n});",
            "app.handle('/').get((req, res) => {\n  res.send('GET request received');\n});",
            "app.receive('/').get((req, res) => {\n  res.send('GET request received');\n});"
          ],
          "answer": "app.get('/', (req, res) => {\n  res.send('GET request received');\n});"
        },
        {
          "question": "How can you handle a POST request in Express.js?",
          "options": [
            "app.post('/path', (req, res) => {\n  res.send('POST request received');\n});",
            "app.route('/path').post((req, res) => {\n  res.send('POST request received');\n});",
            "app.create('/path', (req, res) => {\n  res.send('POST request received');\n});",
            "app.receive('/path').post((req, res) => {\n  res.send('POST request received');\n});"
          ],
          "answer": "app.post('/path', (req, res) => {\n  res.send('POST request received');\n});"
        },
        {
          "question": "How can you use middleware in Express.js?",
          "options": [
            "app.middleware((req, res, next) => {\n  // middleware logic\n  next();\n});",
            "app.use((req, res, next) => {\n  // middleware logic\n  next();\n});",
            "app.handle((req, res, next) => {\n  // middleware logic\n  next();\n});",
            "app.apply((req, res, next) => {\n  // middleware logic\n  next();\n});"
          ],
          "answer": "app.use((req, res, next) => {\n  // middleware logic\n  next();\n});"
        },
        {
          "question": "How can you serve static files in Express.js?",
          "options": [
            "app.static('/public', express.static('public'))",
            "app.use('/public', express.static('public'))",
            "app.static('/public', express.static('static'))",
            "app.files('/public', express.static('public'))"
          ],
          "answer": "app.use('/public', express.static('public'))"
        },
        {
          "question": "How can you define a route parameter in Express.js?",
          "options": [
            "app.route('/:id')",
            "app.param('/:id')",
            "app.get('/:id')",
            "app.parameter('/:id')"
          ],
          "answer": "app.get('/:id')"
        },
        {
          "question": "How can you handle multiple HTTP methods for a single route in Express.js?",
          "options": [
            "app.all('/route', (req, res) => {})",
            "app.route('/route').all((req, res) => {})",
            "app.route('/route').use((req, res) => {})",
            "app.route('/route').methods((req, res) => {})"
          ],
          "answer": "app.route('/route').all((req, res) => {})"
        },
        {
          "question": "How can you create a nested route in Express.js?",
          "options": [
            "app.route('/parent/child')",
            "app.use('/parent/child')",
            "app.get('/parent/child')",
            "app.handle('/parent/child')"
          ],
          "answer": "app.route('/parent/child')"
        },
        {
          "question": "How can you implement route chaining in Express.js?",
          "options": [
            "app.chain('/route').get((req, res) => {}).post((req, res) => {})",
            "app.route('/route').chain.get((req, res) => {}).post((req, res) => {})",
            "app.route('/route').get((req, res) => {}).chain.post((req, res) => {})",
            "app.route('/route').get((req, res) => {}).post((req, res) => {}).chain()"
          ],
          "answer": "app.route('/route').get((req, res) => {}).post((req, res) => {})"
        }
      ]
    },
    {
      "title": "SQL",
      "icon": "/assets/images/icon-sql.svg",
      "questions": [
        {
          "question": "What does SQL stand for?",
          "options": [
            "Structured Query Language",
            "Sequential Query Language",
            "Semantic Query Language",
            "Simple Query Language"
          ],
          "answer": "Structured Query Language"
        },
        {
          "question": "Which SQL keyword is used to retrieve data from a database table?",
          "options": ["FETCH", "SELECT", "RETRIEVE", "SEARCH"],
          "answer": "SELECT"
        },
        {
          "question": "What is the purpose of the SQL statement 'GROUP BY'?",
          "options": [
            "To arrange the result set in ascending order",
            "To group rows that have the same values into summary rows",
            "To filter rows based on specified conditions",
            "To join two or more tables based on a related column between them"
          ],
          "answer": "To group rows that have the same values into summary rows"
        },
        {
          "question": "Which SQL clause is used to filter the results of a query based on specified conditions?",
          "options": ["ORDER BY", "GROUP BY", "HAVING", "WHERE"],
          "answer": "WHERE"
        },
        {
          "question": "Which SQL statement is used to delete records from a database table?",
          "options": ["DELETE", "REMOVE", "DROP", "CLEAR"],
          "answer": "DELETE"
        },
        {
          "question": "Which SQL clause is used to specify a condition for grouping rows when using the 'GROUP BY' clause?",
          "options": ["HAVING", "WHERE", "ORDER BY", "LIMIT"],
          "answer": "HAVING"
        },
        {
          "question": "What does the SQL statement 'DISTINCT' do?",
          "options": [
            "It selects only the first occurrence of each unique value in a column",
            "It orders the result set in ascending order",
            "It filters rows based on specified conditions",
            "It retrieves data from multiple tables based on a related column between them"
          ],
          "answer": "It selects only the first occurrence of each unique value in a column"
        },
        {
          "question": "Which SQL statement is used to add new rows of data to a database table?",
          "options": ["ADD", "INSERT", "CREATE", "APPEND"],
          "answer": "INSERT"
        },
        {
          "question": "What does the SQL function 'MAX()' do?",
          "options": [
            "It calculates the average value of a column",
            "It returns the highest value in a column",
            "It counts the number of rows in a table",
            "It retrieves the first occurrence of each unique value in a column"
          ],
          "answer": "It returns the highest value in a column"
        },
        {
          "question": "What is the purpose of the SQL statement 'WHERE'?",
          "options": [
            "To group rows that have the same values into summary rows",
            "To arrange the result set in ascending order",
            "To filter rows based on specified conditions",
            "To retrieve data from multiple tables based on a related column between them"
          ],
          "answer": "To filter rows based on specified conditions"
        },
        {
          "question": "Which SQL clause is used to specify the columns to retrieve in a SELECT statement?",
          "options": ["FROM", "SELECT", "WHERE", "GROUP BY"],
          "answer": "SELECT"
        },
        {
          "question": "Which SQL statement is used to delete a table from a database?",
          "options": [
            "DROP TABLE",
            "DELETE TABLE",
            "REMOVE TABLE",
            "CLEAR TABLE"
          ],
          "answer": "DROP TABLE"
        },
        {
          "question": "What does the SQL term 'ACID' stand for in the context of database transactions?",
          "options": [
            "All Columns Indexed and Defined",
            "Atomicity, Consistency, Isolation, Durability",
            "Aggregate, Consistency, Inheritance, Data",
            "Alphanumeric, Coded, Indexed, Distributed"
          ],
          "answer": "Atomicity, Consistency, Isolation, Durability"
        },
        {
          "question": "What is the difference between a primary key and a foreign key in SQL?",
          "options": [
            "A primary key uniquely identifies each row in a table, while a foreign key establishes a link between two tables",
            "A primary key is used to enforce referential integrity, while a foreign key is used to ensure data uniqueness",
            "A primary key is used for sorting rows in a table, while a foreign key is used for indexing purposes",
            "A primary key is required for all tables, while a foreign key is optional"
          ],
          "answer": "A primary key uniquely identifies each row in a table, while a foreign key establishes a link between two tables"
        },
        {
          "question": "What is the purpose of normalization in database design?",
          "options": [
            "To increase redundancy and improve data integrity",
            "To decrease data redundancy and improve data integrity",
            "To simplify data storage and retrieval operations",
            "To complicate data storage and retrieval operations"
          ],
          "answer": "To decrease data redundancy and improve data integrity"
        },
        {
          "question": "What is the difference between SQL and NoSQL databases?",
          "options": [
            "SQL databases are relational, while NoSQL databases are non-relational",
            "SQL databases are non-relational, while NoSQL databases are relational",
            "SQL databases use JSON for data storage, while NoSQL databases use tables",
            "SQL databases are schema-less, while NoSQL databases have a fixed schema"
          ],
          "answer": "SQL databases are relational, while NoSQL databases are non-relational"
        },
        {
          "question": "What is a stored procedure in SQL?",
          "options": [
            "A query that retrieves data from multiple tables",
            "A predefined set of SQL statements that can be executed on demand",
            "A function that calculates a value based on input parameters",
            "A constraint that enforces rules on data integrity"
          ],
          "answer": "A predefined set of SQL statements that can be executed on demand"
        },
        {
          "question": "What is the purpose of an index in SQL?",
          "options": [
            "To define a unique identifier for each row in a table",
            "To enforce referential integrity between tables",
            "To optimize query performance by speeding up data retrieval operations",
            "To define constraints on column values"
          ],
          "answer": "To optimize query performance by speeding up data retrieval operations"
        },
        {
          "question": "What is the difference between a SQL view and a SQL table?",
          "options": [
            "A view stores data physically, while a table stores data logically",
            "A view is a virtual table based on the result of a SQL query, while a table stores data directly",
            "A view is used for data manipulation, while a table is used for data storage",
            "A view can only be queried, while a table can be queried and modified"
          ],
          "answer": "A view is a virtual table based on the result of a SQL query, while a table stores data directly"
        },
        {
          "question": "What is the purpose of the SQL 'ROLLBACK' statement?",
          "options": [
            "To permanently delete data from a table",
            "To undo changes made to the database since the last 'COMMIT' statement",
            "To retrieve data from a table",
            "To save changes made to the database since the last 'COMMIT' statement"
          ],
          "answer": "To undo changes made to the database since the last 'COMMIT' statement"
        },
        {
          "question": "What is the purpose of a SQL transaction?",
          "options": [
            "To execute a single SQL statement",
            "To group multiple SQL statements into a single unit of work",
            "To define a set of rules for data manipulation",
            "To retrieve data from a database table"
          ],
          "answer": "To group multiple SQL statements into a single unit of work"
        },
        {
          "question": "What is the purpose of SQL constraints?",
          "options": [
            "To specify the data type of a column",
            "To enforce rules on data integrity",
            "To define a unique identifier for each row in a table",
            "To optimize query performance"
          ],
          "answer": "To enforce rules on data integrity"
        },
        {
          "question": "What is the purpose of SQL triggers?",
          "options": [
            "To execute a predefined set of SQL statements on demand",
            "To enforce referential integrity between tables",
            "To automate the execution of SQL statements in response to certain events",
            "To optimize query performance by speeding up data retrieval operations"
          ],
          "answer": "To automate the execution of SQL statements in response to certain events"
        },
        {
          "question": "What is a SQL subquery?",
          "options": [
            "A query that retrieves data from multiple tables",
            "A query that is nested within another query",
            "A query that joins two or more tables based on a related column between them",
            "A query that retrieves aggregated data from a single table"
          ],
          "answer": "A query that is nested within another query"
        },
        {
          "question": "Which SQL function is used to count the number of rows returned by a query?",
          "options": ["SUM()", "COUNT()", "AVG()", "MAX()"],
          "answer": "COUNT()"
        },
        {
          "question": "What is the purpose of the SQL statement 'JOIN'?",
          "options": [
            "To sort the result set in ascending order",
            "To combine rows from two or more tables based on a related column between them",
            "To filter rows based on specified conditions",
            "To group rows that have the same values into summary rows"
          ],
          "answer": "To combine rows from two or more tables based on a related column between them"
        },
        {
          "question": "Which SQL statement is used to modify existing data in a database table?",
          "options": ["UPDATE", "INSERT", "ALTER", "MODIFY"],
          "answer": "UPDATE"
        },
        {
          "question": "What is the purpose of the SQL statement 'ORDER BY'?",
          "options": [
            "To arrange the result set in ascending order",
            "To group rows that have the same values into summary rows",
            "To filter rows based on specified conditions",
            "To retrieve data from multiple tables based on a related column between them"
          ],
          "answer": "To arrange the result set in ascending order"
        },
        {
          "question": "What is the purpose of SQL views?",
          "options": [
            "To define a unique identifier for each row in a table",
            "To store data physically in the database",
            "To provide a virtual representation of data based on a predefined SQL query",
            "To execute predefined sets of SQL statements on demand"
          ],
          "answer": "To provide a virtual representation of data based on a predefined SQL query"
        },
        {
          "question": "What is the purpose of SQL aggregate functions?",
          "options": [
            "To execute predefined sets of SQL statements on demand",
            "To perform calculations on a set of values and return a single value",
            "To enforce rules on data integrity",
            "To optimize query performance by speeding up data retrieval operations"
          ],
          "answer": "To perform calculations on a set of values and return a single value"
        },
        {
          "question": "What is the purpose of SQL stored procedures?",
          "options": [
            "To define a unique identifier for each row in a table",
            "To store data physically in the database",
            "To encapsulate a set of SQL statements for reuse and efficient execution",
            "To optimize query performance by speeding up data retrieval operations"
          ],
          "answer": "To encapsulate a set of SQL statements for reuse and efficient execution"
        },
        {
          "question": "What is the purpose of SQL indexes?",
          "options": [
            "To define a unique identifier for each row in a table",
            "To enforce rules on data integrity",
            "To optimize query performance by speeding up data retrieval operations",
            "To store data physically in the database"
          ],
          "answer": "To optimize query performance by speeding up data retrieval operations"
        },
        {
          "question": "What does the SQL statement 'SELECT * FROM table_name' do?",
          "options": [
            "Selects all records from the specified table",
            "Selects the first record from the specified table",
            "Selects the last record from the specified table",
            "Selects records with specific conditions from the specified table"
          ],
          "answer": "Selects all records from the specified table"
        },
        {
          "question": "Which SQL statement is used to update data in a database?",
          "options": ["UPDATE", "INSERT", "DELETE", "ALTER"],
          "answer": "UPDATE"
        },
        {
          "question": "What does the following SQL statement do? \n\nDELETE FROM table_name WHERE condition;",
          "options": [
            "Deletes all records from the specified table",
            "Deletes the first record from the specified table",
            "Deletes records with specific conditions from the specified table",
            "Deletes the last record from the specified table"
          ],
          "answer": "Deletes records with specific conditions from the specified table"
        },
        {
          "question": "What does the SQL statement 'SELECT DISTINCT column_name FROM table_name' do?",
          "options": [
            "Selects all distinct values from the specified column in the table",
            "Selects the first distinct value from the specified column in the table",
            "Selects the last distinct value from the specified column in the table",
            "Selects all records from the specified column in the table"
          ],
          "answer": "Selects all distinct values from the specified column in the table"
        },
        {
          "question": "Fill in the blank: The SQL statement 'INSERT INTO table_name _________' is used to add new records to a table.",
          "options": ["VALUES", "ADD", "SET", "UPDATE"],
          "answer": "VALUES"
        },
        {
          "question": "Fill in the blank: The SQL statement 'UPDATE table_name SET column_name = new_value _________' is used to modify existing data in a table.",
          "options": [
            "WHERE condition",
            "INSERT INTO",
            "DELETE FROM",
            "VALUES"
          ],
          "answer": "WHERE condition"
        },
        {
          "question": "Fill in the blank: The SQL statement 'DELETE FROM table_name _________' is used to remove records from a table.",
          "options": ["WHERE condition", "INSERT INTO", "UPDATE", "VALUES"],
          "answer": "WHERE condition"
        },
        {
          "question": "Fill in the blank: The SQL statement 'ALTER TABLE table_name _________' is used to modify the structure of an existing table.",
          "options": ["ADD COLUMN", "INSERT INTO", "DELETE FROM", "VALUES"],
          "answer": "ADD COLUMN"
        },
        {
          "question": "Fill in the blank: The SQL statement 'SELECT * FROM table_name _________' is used to retrieve all records from a table.",
          "options": ["WHERE condition", "INSERT INTO", "UPDATE", "VALUES"],
          "answer": "WHERE condition"
        },
        {
          "question": "Fill in the blank: The SQL statement 'SELECT column1, column2 FROM table_name _________' is used to retrieve specific columns from a table.",
          "options": ["WHERE condition", "INSERT INTO", "UPDATE", "VALUES"],
          "answer": "WHERE condition"
        },
        {
          "question": "Fill in the blank: The SQL statement 'SELECT COUNT(*) FROM table_name _________' is used to count the number of records in a table.",
          "options": ["WHERE condition", "INSERT INTO", "UPDATE", "VALUES"],
          "answer": "WHERE condition"
        },
        {
          "question": "Why is it important to use indexes in SQL databases?",
          "options": [
            "To define a unique identifier for each row in a table",
            "To enforce rules on data integrity",
            "To optimize query performance by speeding up data retrieval operations",
            "To store data physically in the database"
          ],
          "answer": "To optimize query performance by speeding up data retrieval operations"
        },
        {
          "question": "In what scenarios would you prefer to use a NoSQL database over a SQL database?",
          "options": [
            "When dealing with highly structured data and complex queries",
            "When scalability and flexibility are more important than strict consistency and transactions",
            "When data integrity and ACID compliance are paramount",
            "When the application requires complex transactions and joins"
          ],
          "answer": "When scalability and flexibility are more important than strict consistency and transactions"
        },
        {
          "question": "When designing a database schema, what factors should you consider?",
          "options": [
            "Data redundancy and normalization",
            "Scalability and performance",
            "Data integrity and consistency",
            "All of the above"
          ],
          "answer": "All of the above"
        },
        {
          "question": "How does SQL differ from JavaScript in terms of its usage and purpose?",
          "options": [
            "SQL is used for server-side scripting, while JavaScript is used for client-side scripting",
            "SQL is a query language used for managing and manipulating databases, while JavaScript is a programming language used for creating dynamic web content and interactivity",
            "SQL is used for creating web applications, while JavaScript is used for database management",
            "SQL is a programming language, while JavaScript is a markup language"
          ],
          "answer": "SQL is a query language used for managing and manipulating databases, while JavaScript is a programming language used for creating dynamic web content and interactivity"
        },
        {
          "question": "When developing a web application that interacts with a database, why is it important to sanitize user input?",
          "options": [
            "To optimize query performance",
            "To prevent SQL injection attacks",
            "To ensure compatibility with different database systems",
            "To improve database indexing"
          ],
          "answer": "To prevent SQL injection attacks"
        },
        {
          "question": "How can SQL injection attacks be prevented in a web application?",
          "options": [
            "By using strong encryption for database connections",
            "By regularly updating the database software",
            "By sanitizing user input and using parameterized queries",
            "By disabling all database access from client-side scripts"
          ],
          "answer": "By sanitizing user input and using parameterized queries"
        },
        {
          "question": "When developing a web application, why should you avoid executing SQL queries directly from client-side JavaScript?",
          "options": [
            "To prevent SQL injection attacks",
            "To improve query performance",
            "To simplify the development process",
            "To enhance database security"
          ],
          "answer": "To prevent SQL injection attacks"
        },
        {
          "question": "How can you ensure data integrity in a database?",
          "options": [
            "By using strong encryption for data storage",
            "By regularly backing up the database",
            "By enforcing constraints and relationships",
            "By optimizing database indexes"
          ],
          "answer": "By enforcing constraints and relationships"
        },
        {
          "question": "Why is it important to handle errors properly when working with databases in JavaScript?",
          "options": [
            "To improve query performance",
            "To prevent SQL injection attacks",
            "To ensure data integrity",
            "To provide a better user experience and avoid potential data loss"
          ],
          "answer": "To provide a better user experience and avoid potential data loss"
        }
      ]
    },
    {
      "title": "Git / Bash",
      "icon": "/assets/images/icon-gitbash.svg",
      "questions": [
        {
          "question": "What is Git?",
          "options": [
            "A version control system for tracking changes in files and coordinating work among multiple people",
            "A programming language used for web development",
            "An operating system for managing computer hardware",
            "A cloud storage service for hosting files"
          ],
          "answer": "A version control system for tracking changes in files and coordinating work among multiple people"
        },
        {
          "question": "What is the purpose of a Git repository?",
          "options": [
            "To store data files",
            "To manage project dependencies",
            "To track changes to files over time",
            "To host a website"
          ],
          "answer": "To track changes to files over time"
        },
        {
          "question": "What is a 'commit' in Git?",
          "options": [
            "A request to merge changes from one branch into another",
            "A copy of a file stored in a repository",
            "A snapshot of the current state of a repository",
            "A command used to revert changes to a previous state"
          ],
          "answer": "A snapshot of the current state of a repository"
        },
        {
          "question": "What is the purpose of the 'git clone' command?",
          "options": [
            "To create a new branch in a repository",
            "To merge changes from one branch into another",
            "To make a copy of an existing repository",
            "To revert changes to a previous state"
          ],
          "answer": "To make a copy of an existing repository"
        },
        {
          "question": "What is the difference between 'git pull' and 'git fetch'?",
          "options": [
            "'git pull' downloads changes from a remote repository and integrates them into the current branch, while 'git fetch' only downloads changes from a remote repository but does not integrate them.",
            "'git pull' and 'git fetch' are interchangeable commands with the same functionality.",
            "'git pull' and 'git fetch' are used for pushing changes to a remote repository.",
            "'git pull' is used to create a new branch, while 'git fetch' is used to merge changes from one branch into another."
          ],
          "answer": "'git pull' downloads changes from a remote repository and integrates them into the current branch, while 'git fetch' only downloads changes from a remote repository but does not integrate them."
        },
        {
          "question": "What does the 'git branch' command do?",
          "options": [
            "Creates a new branch in the repository",
            "Merges changes from one branch into another",
            "Deletes a branch from the repository",
            "Lists all branches in the repository"
          ],
          "answer": "Lists all branches in the repository"
        },
        {
          "question": "What is a 'merge conflict' in Git?",
          "options": [
            "A conflict that occurs when attempting to push changes to a remote repository",
            "A conflict that occurs when creating a new branch",
            "A conflict that occurs when merging changes from one branch into another, and Git is unable to automatically resolve the differences",
            "A conflict that occurs when cloning a repository"
          ],
          "answer": "A conflict that occurs when merging changes from one branch into another, and Git is unable to automatically resolve the differences"
        },
        {
          "question": "What does the 'git push' command do?",
          "options": [
            "Downloads changes from a remote repository and integrates them into the current branch",
            "Creates a new branch in the remote repository",
            "Pushes changes from the local repository to a remote repository",
            "Deletes a branch from the remote repository"
          ],
          "answer": "Pushes changes from the local repository to a remote repository"
        },
        {
          "question": "What is the purpose of the 'git checkout' command?",
          "options": [
            "To create a new branch in the repository",
            "To merge changes from one branch into another",
            "To switch between different branches in the repository",
            "To list all branches in the repository"
          ],
          "answer": "To switch between different branches in the repository"
        },
        {
          "question": "What is the purpose of the 'git log' command?",
          "options": [
            "To create a new commit in the repository",
            "To merge changes from one branch into another",
            "To list all commits in the repository",
            "To delete a commit from the repository"
          ],
          "answer": "To list all commits in the repository"
        },
        {
          "question": "What does the 'git revert' command do?",
          "options": [
            "Deletes a commit from the repository",
            "Creates a new commit in the repository",
            "Undoes the changes introduced by a specific commit",
            "Merges changes from one branch into another"
          ],
          "answer": "Undoes the changes introduced by a specific commit"
        },
        {
          "question": "What is the purpose of the 'git stash' command?",
          "options": [
            "To permanently delete changes in the working directory",
            "To create a backup of changes in the working directory",
            "To switch between different branches in the repository",
            "To list all changes in the working directory"
          ],
          "answer": "To create a backup of changes in the working directory"
        },
        {
          "question": "What does the 'git remote' command do?",
          "options": [
            "Creates a new remote repository",
            "Lists all remote repositories",
            "Deletes a remote repository",
            "Pushes changes to a remote repository"
          ],
          "answer": "Lists all remote repositories"
        },
        {
          "question": "What is the purpose of the 'git fetch' command?",
          "options": [
            "To download changes from a remote repository and integrate them into the current branch",
            "To push changes from the local repository to a remote repository",
            "To merge changes from one branch into another",
            "To download changes from a remote repository without integrating them into the current branch"
          ],
          "answer": "To download changes from a remote repository without integrating them into the current branch"
        },
        {
          "question": "What does the 'git merge' command do?",
          "options": [
            "Downloads changes from a remote repository and integrates them into the current branch",
            "Merges changes from one branch into another",
            "Creates a new branch in the repository",
            "Deletes a branch from the repository"
          ],
          "answer": "Merges changes from one branch into another"
        },
        {
          "question": "What is the purpose of the 'git rebase' command?",
          "options": [
            "To merge changes from one branch into another",
            "To rewrite the commit history of a branch",
            "To create a new branch in the repository",
            "To switch between different branches in the repository"
          ],
          "answer": "To rewrite the commit history of a branch"
        },
        {
          "question": "What is a 'remote' in Git?",
          "options": [
            "A branch that exists only on the local machine",
            "A branch that exists only on the remote repository",
            "A reference to a remote repository",
            "A commit that has been pushed to the remote repository"
          ],
          "answer": "A reference to a remote repository"
        },
        {
          "question": "What is a 'fork' in the context of Git repositories?",
          "options": [
            "A copy of a repository that exists only on the local machine",
            "A copy of a repository that exists on a remote repository",
            "A branch that exists only on the local machine",
            "A branch that exists only on the remote repository"
          ],
          "answer": "A copy of a repository that exists on a remote repository"
        },
        {
          "question": "What is the purpose of the 'git checkout -b' command?",
          "options": [
            "To create a new branch and switch to it",
            "To switch to an existing branch",
            "To merge changes from one branch into another",
            "To delete a branch"
          ],
          "answer": "To create a new branch and switch to it"
        },
        {
          "question": "What is the purpose of the 'git tag' command?",
          "options": [
            "To create a new branch in the repository",
            "To merge changes from one branch into another",
            "To mark a specific commit with a label",
            "To switch between different branches in the repository"
          ],
          "answer": "To mark a specific commit with a label"
        },
        {
          "question": "What does the 'git push --force' command do?",
          "options": [
            "Forces a merge between two branches",
            "Forces the deletion of a remote branch",
            "Forces the creation of a new branch",
            "Forces the push of local commits to a remote repository, overwriting any conflicting changes"
          ],
          "answer": "Forces the push of local commits to a remote repository, overwriting any conflicting changes"
        },
        {
          "question": "What is the purpose of the 'git cherry-pick' command?",
          "options": [
            "To merge changes from one branch into another",
            "To apply the changes introduced by a specific commit to the current branch",
            "To switch to an existing branch",
            "To create a new branch in the repository"
          ],
          "answer": "To apply the changes introduced by a specific commit to the current branch"
        },
        {
          "question": "What does the 'git revert' command do?",
          "options": [
            "Deletes a commit from the repository",
            "Creates a new commit in the repository",
            "Undoes the changes introduced by a specific commit",
            "Merges changes from one branch into another"
          ],
          "answer": "Undoes the changes introduced by a specific commit"
        },
        {
          "question": "What is the purpose of the 'git reset' command?",
          "options": [
            "To create a new commit in the repository",
            "To undo the changes introduced by a specific commit",
            "To switch between different branches in the repository",
            "To move the HEAD pointer to a different commit"
          ],
          "answer": "To move the HEAD pointer to a different commit"
        },
        {
          "question": "What is the purpose of the 'git log' command with the '--graph' option?",
          "options": [
            "To list all commits in the repository",
            "To display a graphical representation of the commit history",
            "To merge changes from one branch into another",
            "To create a new commit in the repository"
          ],
          "answer": "To display a graphical representation of the commit history"
        },
        {
          "question": "What does the 'ls' command do in Bash?",
          "options": [
            "Lists all files and directories in the current directory",
            "Creates a new directory",
            "Deletes a file or directory",
            "Moves a file or directory"
          ],
          "answer": "Lists all files and directories in the current directory"
        },
        {
          "question": "What does the 'pwd' command do in Bash?",
          "options": [
            "Prints the working directory",
            "Creates a new directory",
            "Deletes a file or directory",
            "Moves a file or directory"
          ],
          "answer": "Prints the working directory"
        },
        {
          "question": "What does the 'mkdir' command do in Bash?",
          "options": [
            "Lists all files and directories in the current directory",
            "Prints the working directory",
            "Creates a new directory",
            "Moves a file or directory"
          ],
          "answer": "Creates a new directory"
        },
        {
          "question": "What does the 'cd' command do in Bash?",
          "options": [
            "Lists all files and directories in the current directory",
            "Prints the working directory",
            "Changes the current directory",
            "Creates a new directory"
          ],
          "answer": "Changes the current directory"
        },
        {
          "question": "What does the 'rm' command do in Bash?",
          "options": [
            "Lists all files and directories in the current directory",
            "Deletes a file or directory",
            "Prints the working directory",
            "Changes the current directory"
          ],
          "answer": "Deletes a file or directory"
        },
        {
          "question": "What does the 'cp' command do in Bash?",
          "options": [
            "Moves a file or directory",
            "Deletes a file or directory",
            "Copies a file or directory",
            "Prints the working directory"
          ],
          "answer": "Copies a file or directory"
        },
        {
          "question": "What does the 'mv' command do in Bash?",
          "options": [
            "Deletes a file or directory",
            "Copies a file or directory",
            "Moves a file or directory",
            "Prints the working directory"
          ],
          "answer": "Moves a file or directory"
        },
        {
          "question": "What does the 'cat' command do in Bash?",
          "options": [
            "Concatenates files and prints the result",
            "Creates a new file",
            "Changes the permissions of a file",
            "Counts the number of lines, words, and characters in a file"
          ],
          "answer": "Concatenates files and prints the result"
        },
        {
          "question": "What does the 'grep' command do in Bash?",
          "options": [
            "Concatenates files and prints the result",
            "Searches for patterns in files",
            "Changes the permissions of a file",
            "Counts the number of lines, words, and characters in a file"
          ],
          "answer": "Searches for patterns in files"
        },
        {
          "question": "What does the 'echo' command do in Bash?",
          "options": [
            "Concatenates files and prints the result",
            "Prints text or variables to the terminal",
            "Changes the permissions of a file",
            "Counts the number of lines, words, and characters in a file"
          ],
          "answer": "Prints text or variables to the terminal"
        },
        {
          "question": "What does the 'chmod' command do in Bash?",
          "options": [
            "Concatenates files and prints the result",
            "Searches for patterns in files",
            "Changes the permissions of a file",
            "Counts the number of lines, words, and characters in a file"
          ],
          "answer": "Changes the permissions of a file"
        },
        {
          "question": "What does the 'wc' command do in Bash?",
          "options": [
            "Concatenates files and prints the result",
            "Searches for patterns in files",
            "Changes the permissions of a file",
            "Counts the number of lines, words, and characters in a file"
          ],
          "answer": "Counts the number of lines, words, and characters in a file"
        },
        {
          "question": "What does the 'head' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Displays the last few lines of a file",
            "Counts the number of lines, words, and characters in a file",
            "Searches for patterns in files"
          ],
          "answer": "Displays the first few lines of a file"
        },
        {
          "question": "What does the 'tail' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Displays the last few lines of a file",
            "Counts the number of lines, words, and characters in a file",
            "Searches for patterns in files"
          ],
          "answer": "Displays the last few lines of a file"
        },
        {
          "question": "What does the 'sort' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Displays the last few lines of a file",
            "Sorts the contents of a file alphabetically or numerically",
            "Searches for patterns in files"
          ],
          "answer": "Sorts the contents of a file alphabetically or numerically"
        },
        {
          "question": "What does the 'uniq' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Removes duplicate lines from a sorted file",
            "Counts the number of lines, words, and characters in a file",
            "Searches for patterns in files"
          ],
          "answer": "Removes duplicate lines from a sorted file"
        },
        {
          "question": "What does the 'tee' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Writes the output to a file and also to the terminal",
            "Counts the number of lines, words, and characters in a file",
            "Searches for patterns in files"
          ],
          "answer": "Writes the output to a file and also to the terminal"
        },
        {
          "question": "What does the 'find' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Searches for files and directories matching specified criteria",
            "Counts the number of lines, words, and characters in a file",
            "Sorts the contents of a file alphabetically or numerically"
          ],
          "answer": "Searches for files and directories matching specified criteria"
        },
        {
          "question": "What does the 'grep -v' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Excludes lines that match the pattern from the output",
            "Counts the number of lines, words, and characters in a file",
            "Searches for patterns in files"
          ],
          "answer": "Excludes lines that match the pattern from the output"
        },
        {
          "question": "What does the 'cut' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Extracts specific columns or fields from a file",
            "Counts the number of lines, words, and characters in a file",
            "Searches for patterns in files"
          ],
          "answer": "Extracts specific columns or fields from a file"
        },
        {
          "question": "What does the 'awk' command do in Bash?",
          "options": [
            "Displays the first few lines of a file",
            "Extracts specific columns or fields from a file",
            "Counts the number of lines, words, and characters in a file",
            "A text processing tool for pattern scanning and processing"
          ],
          "answer": "A text processing tool for pattern scanning and processing"
        },
        {
          "question": "What does the following Bash command sequence accomplish?\n\n```bash\nls -l | grep 'txt' | wc -l\n```",
          "options": [
            "Lists all files and directories in the current directory, filters for those containing 'txt', and counts the number of matching files",
            "Lists all files and directories in the current directory, filters for those containing 'txt', and displays detailed information about them",
            "Lists all files and directories in the current directory, counts the number of lines in each file, and displays the total number of lines",
            "Lists all files and directories in the current directory, sorts them alphabetically, and displays the total number of files"
          ],
          "answer": "Lists all files and directories in the current directory, filters for those containing 'txt', and counts the number of matching files"
        },
        {
          "question": "What does the following Bash command sequence accomplish?\n\n```bash\ncat file.txt | grep 'pattern' | cut -d',' -f2 | sort | uniq\n```",
          "options": [
            "Concatenates files, searches for lines containing 'pattern', extracts the second field delimited by commas, sorts the output, and removes duplicate lines",
            "Concatenates files, searches for lines containing 'pattern', extracts the second field delimited by commas, counts the occurrences of each unique value, and displays the result",
            "Concatenates files, searches for lines containing 'pattern', extracts the second field delimited by commas, and removes duplicate lines",
            "Concatenates files, searches for lines containing 'pattern', extracts the second field delimited by commas, and sorts the output"
          ],
          "answer": "Concatenates files, searches for lines containing 'pattern', extracts the second field delimited by commas, sorts the output, and removes duplicate lines"
        },
        {
          "question": "What does the following Bash command sequence accomplish?\n\n```bash\nfind . -type f -name '*.txt' | xargs grep 'keyword'\n```",
          "options": [
            "Finds all text files in the current directory and its subdirectories, then searches for lines containing 'keyword' in each of these files",
            "Finds all text files in the current directory and its subdirectories, then displays detailed information about each file containing 'keyword'",
            "Finds all files in the current directory and its subdirectories, then searches for lines containing 'keyword' in each of these files",
            "Finds all files in the current directory and its subdirectories, then displays detailed information about each text file containing 'keyword'"
          ],
          "answer": "Finds all text files in the current directory and its subdirectories, then searches for lines containing 'keyword' in each of these files"
        },
        {
          "question": "What does the following Bash command sequence accomplish?\n\n```bash\ntail -n 10 logfile.txt | grep 'error'\n```",
          "options": [
            "Displays the last 10 lines of the file 'logfile.txt' and searches for lines containing 'error'",
            "Displays the first 10 lines of the file 'logfile.txt' and searches for lines containing 'error'",
            "Displays the last 10 lines of the file 'logfile.txt' and counts the occurrences of each unique value",
            "Displays the last 10 lines of the file 'logfile.txt' and removes duplicate lines"
          ],
          "answer": "Displays the last 10 lines of the file 'logfile.txt' and searches for lines containing 'error'"
        }
      ]
    }
  ]
}
